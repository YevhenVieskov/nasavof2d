      PROGRAM IIWI 
c	(INPUT,TAPE5=INPUT,OUTPUT,TAPE6=OUTPUT,TAPE7,TAPE8
c	,TTY,TAPE59=TTY)


c	    COPYRIGHT, 1985. VIE REGENTS OF TNE UNIVERSITY OF CALIFORNIA.
c         THIS S2FTWARE wAS !JRCDJCE2 UNDER & u- S- GOvERNM~NT CoNTRAC?
c         IW-7405-ENG-361 BY THE LOS ALAMOS NLTIONAL LABORATOR}. WHICH .
c         . IS OPERATED 3V THE UNiVEi?51T~OF CALIFORNIA FOR THE u. S.
c         DEPARTMENT OF ENERGY. THE U. S. GOVERNMENT IS LICENSED TO USE,
c         REPROOUCE, ANO TO DISTRIBUTE THIS SOFTWARE. PERMISSION IS
c         GRANTEO TO THE PUBLIC TO COPY AND USE THIS SOFTWARE WITHOUT
c         CHARGE. PROVIDED THAT THIS NOTICE AND ANY STATEMENT OF
c         AUTHORSHIP ARE REPROOUCEO ON ALL COPIES.
c
c         NEITHER THE GOVERNMENT
c         NOR THE UNIVERSITY MAKES ANY WARRANTY. EXPRESS OR IMPLIED.
c         OR ASSUMES ANY LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS
c         SOFTWARE.

C          TAPE7 IS THE RESTART DUMP
C	    TAPE8 IS THE OUTPUT FILE FOR EQUIB
C	    TAPE12 IS THE FILM OUTPUT

C	    VOLUME OF FLUID METHOD

C	    LIST OF PRIMARY VARIABLES
C
C	    INPUT   PARAMETERS (NAMELIST /XPUT/)/

C	    ALPHA   CONTROLS AMOUNT OF DONOR CELL FLUXING (=1.0 FOR FULL
C	            DONOR CELL DIFFERENCING.=0.0 FOR CENTRAL DIFFERENCING)
C          AUTOT   AUTOMATIC TIME STEP FLAG (=1.0 FOR AUTOMATIC DELT
C	            ADJUSTMENT, =0.0 FOR CONSTANT DELT)
C          CANGLE  CONTACT ANGLE.IN DEGRES.BETWEEN FLUID AND WALL
C	    CON     C.F.L.CONDITION - CELL WIDTH FRACTION MOVED IN TIME STEP
C          DELT    TIME STEP
C	    DTCRMX  MAXIMUM DELT USING CONJUGATE RESIDUAL SOLUTION METHOD
C	    EPSI    PRESSURE ITERATION CONVERGENCE CRITERION
C	    FLHT    FLUID HEIGHT, IN Y-DIRECTION
C	    GX      BODY ACCELERATION IN POSITIVE X-DIRECTION 
C	    GY      BODY  ACCELERATION IN POSITIVE Y-DIRECTION 
C	    ICYL    MESH GEOMETRY INDICATOR (=1 FOR CYLINDRICAL COORDINATES
C	            =0 FOR PLANE COORDINATES)
C	    IDEFM   DEFOAMER OPTION FLAG ON = 1 *** OFF = 0
C	    ICIV    DIVERGENCE CORRECTION FLAG 1=ON 0=OFF
C	    IEQIC   FLAG USED TO ACTIVATE EQUILIBRIUM FREE SURFACE
C	            CALCULATION DURING SETUP
C          IMOVY   MOVIE INDICATOR (=1 FOR MOVIE FILM OUTPUT, =0 FOR
C	            OTHER FILM OUTPUT)
C	    ISOR    PRESSURE ITERATION SOLUTION METHOD
C	            CONJUGATE RESIDUAL =0 **** SDR = 1
C          ISURF10 SURFACE TENSION INDICATOR (=1 FOR SURFACE TENSION,
C	            =0 FOR NO SURFACE TENSION)
C          ISYMPLT SYMMETRY PLOT INDICATOR (=1 FOR SYMMETRY PLOT.
C	            =0 FOR NO SYMMETRY PLOT)
C	    KB      INDICATOR FOR BOUND ARY CONDITION TO BE USED ALONG THE 
C                  BOTTOM OF THE MESH (=1 FOR RIGID FREE-SLIP WALL,
C	            =2 FOR RIGIL NO-SLIP WALL.=3 FOR CONTINUATIVE
C	            BOUNDARY, =4 FOR PERIODIC BOUNDARY,'5 FOR CONSTANT
C	            PRESSURE BOUNDARY)
C          KL      INDICATOR FOR BOUNDARY CONDITION ALONG LEFT SIDE OF 
C	            MESH (SEE KB)
C	    KR      INDICATOR FOR BOUNDARY CONDITION ALONG RIGHT SIDE OF 
C	            MESH (SEE KB)
C	    KT      INDICATOR FOR BOUNDARY CONDITION ALONG TOP OF 
C	            MESH (SEE KB)
C	    NAME    PROBLEM IDENTIFICATION
C	    NDUMP   DUMP NUMBER FOR PROBLEM RESTART
C	    NPACK   FLAG TO ACTIVATE PACKING 0=OFF 1=ON
C	    OMG     OVER-RELAXATION FACTOR USED IN PRESSURE ITERATION 
C	    PSAT    LIQUID SATURATION PRESSURE - IN NONZERO CODE SIMULATES
C	            PHASE CHANGE IN NF = 5 CELLS
C	    PLTDT   TIME INCREMENT BETWEEN PLOTS AND/OR PRINTS TO BE 
C		        OUTPUT ON FILM
C	    PRTDT   TIME INCREMENT BETWEEN PRINTS ON PAPER
C
C	    OVOL    AVAILABLE TO SPECIFY FLOW RATE (INFLOW OR OUTFLOW)
C	            IF REQUIRED
C	    RHOF    FLUID  DENSITY (FOR F=1.0 REGION)
C	    SIGMA   SURFACE TENSION COEFFICIENT
C	    TWFIN   PROBLEM TIME TC END CALCULATION
C	    UI      XDoIRECTION VELOCITY USED FOR :NITIALIZING MESH
C	    VI      DIRECTION VELOCITY USED FOR INITIALIZING MESH
C	    VELMX   MAXIMUM VELOCITY EXPECTED Ihj PROBLEM USED TO SCALE
C	            VELOCITY VECTORS
C          XNU     COEFFICIENT OF KINEMATIC VISCOSITY
C
C	    MESH    SETUP IIJPUT  (NAMELIST  /mSHSET/)
C	    DXMN(N) MINIMUM SPACE INCREMENT IN X-DIRECTION IN SUBMESH N
C	    DYMN(N) MINIMUM SPACE INCREMENT IN Y-DIRECTION IN SUBMESH N
C	    NKX     NUMBER OF SUBMESH REGIONS  IN  X-DIRECTION 
C	    NXL(N)  NUMBER OF CELLS BETWEEN LOCATIONS XL(N) AND XC(N) IN
C	            SUBMESH N
C	    NXR(N)  NUMBER OF CELLS BETWEEN LOCATIONS XC(N) AND XL(N+1) IN
C	            SUBMESH N
C	    NYL(N)  NUMBER OF CELLS BETWEEN LOCATIONS YL(N) AND YC(N) IN
C	            SUBMESH N
C          NXR(N)  NUMBER OF CELLS BETWEEN LOCATIONS YC(N) AND YL(N+1) IN
C	            SUBMESH N
C	    XC(N)   X-COORDINATE OF THE CONVERGENCE POINT IN SUBMESH N
C	    XL(N)   LOCATION OF THE LEFT EDGE OF SUBMESH N (NKX+1 VALUES
C	            OF XL(N) ARE NECESSARY BECAUSE THE RIGHT EDGE (XR) OF
C	            SUBMESH N IS DETERMINE BY THE LEFT EDGE OF
C                 SUBMESH N+1)
C         YC(N)   Y-COOROINATE OF THE CONVERGENCE POINT IN SUBMESH N 
C         YL(N)   LOCATION OF THE BOTTOM OF SUBMESH N (NKY+1 VALUES OF
C                 YL(N) ARE NECESSARY BECAUSE THE TOP EDGE (YR) OF
C                 SUBMESH N IS DETERMINED BY THE BOTTOM EDGE OF
C                 SUBMESH N+1)
C +++ INTERIOR OBSTACLE SETUP INPUT  (NAMELIST/ASETIN/) 
	INCLUDE "PARAM.FI"
          DATA EMF /1.0E-06/,EM6/1.0E-06/,EM10/1.0E-10/
		DATA EP10/1.0E+10/,FLGC/0./,FLG/0./
		DATA TQUIT /60./
		DATA PI /3.14159265359/, RPD /0.0174532925/,EM6P1 /1.000001/
		DATA TBEG /0./, TPI /6.283185307/
		DATA EM61 /0.999999/
C+++                 
C
C+++  DEFAULT INPUT DATA
C+++  NOTE  USER MUST SUPPLY THE FOLLOWING REGARDLESS OF DEFAULTS:
C     DELT, TWFIN, PRTDT, PLTDT
          DATA  XNU /0.0/,ICYL /0/,EPSI /1.0E-03/,GX /0.0/,GY /0.0/,UI /
	1     0.0/, VI /0.0/,VELMX /1.0/,IMOVY /0/, OMG /1.7/, ALPHA /1.0/, 
     2     KL /1/, KR /1/, KT /1/, KB /1/, AUTOT /1.0/, ISYMPLT /0/,
     3     ISURF10/0/, SIGMA /0.0/,CANGLE /90.0/,RHOF/1.0/,FLHT /0.0/,
	4     PSAT /0.0/
	  DATA IEQIC /0/

	
	character(50) szNumber
	character(200) fname
C+++
C+++    CALL SYSTEM-DEPENDENT ROUTINES TO INITIALIZE FILM FILE
C+++
C        CALL GPLOT (1HU, 4HIIWI,4)
C	  CALL GRPHLUN (12)
C	  CALL  LIB4020
C	  CALL GRPHCFT
C	  CALL  SETFLSH
C+++    SYSTEM -DEPENDENT CALL TO GET THE JOB TIME LIMIT
C        CALL GETJTL (TTL)
C+++
C+++    CALL THE INITIALIZATION ROUTINE
C+++		
	IMAX=40
	JMAX=40
	  CALL SETPAR

        CALL SETUP
C
C+++    PRINT INITIAL INPUT DATA
C
        CALL PRTPLT (1)
C
C+++    SET INITIAL BOUNDARY CONDITIONS
C
        CALL BC
C
        DTEND=0.002*DELT
	  IF (NDUMP.LE.1) GO TO 30
C
C+++    START TIME CYCLE
C
  10    CONTINUE
!        CALL SECOND (TBEG)
C+++
C+++    PROBLEM DEPENDENT - CALCULATIONAL SHUTOFF FOR SMALL TIMESTEP
        IF (DELT.GT.DTEND) GO TO 20
	  WRITE (59,150) NCYC, T  
	  WRITE (12,150) NCYC, T
	  TWFIN=T*0.999
  20	  CONTINUE
        ITER=0
	  FLG=1.0
	  FNOC=0.0
C
C+++    EXPLICITLY APPROXIMATE NEW TIME- LEVEL VELOCITIES
C
        CALL TILDE  
C
C+++    SET BOUNDARY CONDITIONS
C
        CALL BC
C
C+++    ITERATIVELY ADJUST CELL PRESSURE AND VELOCITY
C
        IF (ISOR.EQ.1) CALL PRESIT   
	  IF (ISOR.EQ.0) CALL PRESCR
	  IF (FNOC.GT.0.5) CALL PRTPLT (4)
C
        IF (FNOC.GT.0.5) CALL PRTPLT (4)
C	
	  IF (FNOC.GT.0.5) GO TO 40
C
C+++    UPDATE FLUID CONFIGURATION
C
  30    CALL VFCONV
C
        IF (FLGC.GT.0.5) GO TO 100
C
C+++    SET BOUNDARY CONDITIONS
C
         CALL BC
C
C+++     DETERMINE PRESSURE INTERPOLATION FACTOR AND NEIGHBOR
C+++     ALSO DETERMINE SURFACE TENSION PRESSURES AND
C+++     WALL ADHESION EFFECTS IN SURFACE CELLS
C
         CALL PETACAL
	   CALL BC
	   IF (NCYC.NE.0.OR.ISOR.NE.0) GO TO 34
	   DO 32 I=2, IM1
	   PSADD=0.0
	   DO 32 J=2,JM1
	   JJ=JM1-J+2
	IF (PS(I,JJ).NE.0.0) PSADD=PS(I,JJ)-P(I,JJ)
	   P(I,JJ)=P(I,JJ)+PSADD
   32 CONTINUE
   34 CONTINUE
C
C+++     PRINT TIME AND CYCLE DATA ON PAPER AND/OR FILM
C
   40 CALL PRTPLT (2)

	IOpst=1
	if(mod(NCYC,1)==0) then
      Write(szNumber,'(i6.6)') NCYC      
	fname=Trim("../nasavof2ds/vtk/")//Trim("uvpf")//Trim(szNumber)
     1//Trim(".vtk")          
	call vtk(IOpst,fname)
	end if
C
         IF (NCYC.LE.0) GO TO 50
	   IF (T+EM6.LT.TWPLT.AND.T.LT.TWFIN) GO TO 60
	   TWPLT=TWPLT+PLTDT
   50 CONTINUE
C
	
C+++     PRINT FIELD VARIABLE  DATA ON  FILM
C
         CALL PRTPLT (3)
C
C+++     PLOT VELOCITY VECTOR, FREE SURFACE, MESH.
C
         CALL DRAW
C
   60 CONTINUE
         IF (NCYC.LE.0) GO TO 70
	   IF (T+EM6.LT.TWPRT) GO TO 80
	   TWPRT=TWPRT+PRTDT
   70 CONTINUE
C
C+++     PRINT FIELD VARIABLE  DATA ON  PAPER
C		
         CALL PRTPLT (4)
C
   80 CONTINUE
      IF (T.GT.TWFIN) GO TO 130
C
C+++     SET THE ADVANCE TIME ARRAYS INTO THE TIME-N ARRAYS
C
         DO 90 I=1,IMAX
	   DO 90 J=1,JMAX
	   UN(I,J)=U(I,J) 
	   VN(I,J)=V(I,J) 
         U(I,J)=0.0
         V(I,J)=0.0 
	   PN(I,J)=P(I,J)
	   FN(I,J)=F(I,J)  
   90    CONTINUE
         NREGN=NREG
C
C+++     ADJUST DELT
C
 100     CALL DELTADJ
C
C+++     ADVANCE TIME
C
         T=T+DELT
C
C+++     ADVANCE CYCLE
C
         IF (NFLGC.LT.5) GO TO 110
	   WRITE (12,170) NCYC, T
	   WRITE (59,170) NCYC, T
c	   CALL EXITLDC ("IIWI PIT")
 110     CONTINUE
         IF (NOCON.LT.5) GO TO 120
	   WRITE (12,160) NCYC, T
	   WRITE (59,160) NCYC, T
c	   CALL EXITLDC ("IIWI FCV")
  120    CONTINUE
         NCYC=NCYC+1
C+++     TERMINATE GRACEFULLY IF OUT OF TIME
C         CALL SECOND (TIME)
		TTL=1 
		TIME=1 !!!MAIN 
		TQUIT=1
		TBEG=1
		TENDD=1
		TEND=1
	    TLEFT=TTL-TIME-TQUIT
	    IF (TLEFT.LT.0.0) CALL TAPOUT (0)
	    IF (MOD(NCYC,200).NE.0) GO TO 10
C	    CALL SECOND (TEND)
C		CALL SECOND (TENDD)
	    GRIND=1000.*(TEND+TEND-TENDD-TBEG)/FLOAT(IBAR*JBAR)
		WRITE (59,140) NCYC, GRIND, ITER
	    IF (IMOVY.EQ.0) WRITE (12,140) NCYC, GRIND, ITER
	    WRITE (6,140) NCYC, GRIND, ITER
	    GO TO 10
C
  130     CONTINUE
c          CALL EXITLDC ("IIWI")
C
  140 FORMAT (1X,5HCYCLE ,I7,1X,6HGRIND= ,1PE12.4 ,2HMS,5HITER=,I5)
  150 FORMAT(1X,29HDELT LESS THAN DTEND ON CYCLE,I6,1X,3HT =,1PE15.7)
  160 FORMAT(//1X,25HTOO MANY PRESSIT FAILURES,2X,5HNCYC=,I7,1X,2HT=,1P
     1E14.6//)
  170 FORMAT(//1X,24HTOO MANY VFCONV FAILURES,3X,5HNCYC=,I7,1X,2HT=,1PE
     114.6//)
	END
	
	
	
	SUBROUTINE ASET
      INCLUDE "PARAM.FI"
C
C     CONIC FCN=OA2*X*X+OA1*X+OB2*Y*Y+OB1*Y+OC2*X*Y+OC1
C     INSIDE FCN=NEGATIVE VALUE
C     IOH=1 ADD OBS INSIDE FCN, IOH=0 SUBTRACT OBS INSIDE FCN
C     
      DIMENSION IFLG(5), DIS(4),XM(5), YM(5)
	IF (NOBS.LE.0) GO TO 240
	DO 230 K=1,NOBS
	DO 220 J=2,JM1
	DO 220 I=2,IM1
	RDXDY=1.0/(DELX(I)*DELY(J))
	DO 60 M=1,4
	GO TO (10,20,30,40), M
   10 X1=X(I)
      Y1=Y(J-1)
	DIS(1)=DELY(J)
	GO TO 50
   20 Y1=Y(J)
      X1=X(I)
	DIS(2)=DELX(I)
	GO TO 50
   30 X1=X(I-1)
      Y1=Y(J)
	DIS(3)=DELY(J)
	GO TO 50
   40 Y1=Y(J-1)
      X1=X(I-1)
	DIS(4)=DELX(I)
   50 IFLG(M)=0
      FCONIC=OA2(K)*X1*X1+OA1(K)*X1+OB2(K)*Y1*Y1+OB1(K)*Y1
     1+OC2(K)*(K)*X1*Y1+OC1(K)
	IF (FCONIC.LE.0.0) IFLG(M)=1
	XM(M)=X1
	YM(M)=Y1
   60 CONTINUE
      IFLG(5)=IFLG(1)
	XM(5)=XM(1)
	YM(5)=YM(1)
	IFLGS=0
	DO 70 M=1,4
   70 IFLGS=IFLGS+IFLG(M)
      BRIJ=0.0
	BTIJ=0.0
	IF (IFLGS.EQ.0) GO TO 220
      IF (IFLGS.LT.4) GO TO 80
	BIJ=1.0
	BRIJ=1.0
	BTIJ=1.0
	GO TO 200
   80 IF (IFLG(1).EQ.1.AND.IFLG(2).EQ.1) BRIJ=1.0
      IF (IFLG(2).EQ.1.AND.IFLG(3).EQ.1) BTIJ=1.0
	DO 160 M=1,4
	IF (IFLG(M).EQ.IFLG(M+1)) GO TO 160
	X1=XM(M)
	Y1=YM(M)
	X2=XM(M+1)
	Y2=YM(M+1)
	IF (IFLG(M).EQ.0) GO TO 90
	X2=XM(M)
	Y2=YM(M)
	X1=XM(M+1)
	Y1=YM(M+1)
   90 EPSIF=0.001*(ABS(X2-X1)+ABS(Y2-Y1))
      SMN=0.0
	FMN=OA2(K)*X2*X2+OA1(K)*X2+OB2(K)*Y2*Y2+OB1(K)*Y2+OC2(K)*X2*Y2+OC1
     1(K)
	SMX=1.0
	FMX=OA2(K)*X1*X1+OA1(K)*X1+OB2(K)*Y1*Y1+OB1(K)*Y2+OC2(K)*X1*Y1+OC1
     1(K)
	S=0.5
  100 XT=S*X1+(1.0-S)*X2
      YT=S*Y1+(1.0-S)*Y2
	FS=OA2(K)*XT*XT+OA1(K)*XT+OB2(K)*YT*YT+OB1(K)*YT+OC2(K)*XT*YT+OC1
     1(K)
	IF (ABS(FS).LT.EPSIF) GO TO 130
	IF (FS.GE.0.0) GO TO 110
	FDEN=ABS(FS-FMN)+1.0E-10
	SE=S-FS*(S-SMN)/FDEN
	IF (SE.GT.SMX) SE=SMX
	FMN=FS
	SMN=S
	GO TO 120
  110 FDEN=ABS(FMX-FS)+1.0E-10
      SE=S-FS*(SMX-S)/FDEN
	IF (SE.LT.SMN) SE=SMN
	FMX=FS
	SMX=S
  120 SI=S-FS*(SMX-SMN)/(FMX-FMN)
      S=0.5*(SE+SI)
	GO TO 100
  130 DIS(M)=SQRT((XT-X2)**2+(YT-Y2)**2)
      GO TO (140,150,160,160), M
  140 BRIJ=DIS(1)/DELY(J)
      GO TO 160
  150 BTIJ=DIS(2)/DELX(I)
  160 CONTINUE
	M=0
	BIJ=0.0
  170 CONTINUE
	M=M+1
	IF(M.EQ.5) GO TO 190
	IF(IFLG(M).EQ.0) GO TO 170
	MP1=M+1
	IF(MP1.EQ.5) MP1=1
	MM1=M-1
	IF(MM1.EQ.0) MM1=4
	BIJ=BIJ+DIS(M)*DIS(MM1)
	IF(IFLG(MP1).EQ.1) GO TO 180
	DIS2=DIS(M)
  180 CONTINUE
	IF(IFLG(MM1).EQ.1) GO TO 170
	DIS1=DIS(MM1)
	GO TO 170
  190 CONTINUE
	IF(IFLGS.EQ.3) BIJ=BIJ-DIS1*DIS2
	BIJ=0.5*BIJ*RDXDY
	IF(BIJ.GT.1.0) BIJ=1.0
  200 CONTINUE
	IF(IOH(K).EQ.0) GO TO 210
	BIJ=-BIJ
	BRIJ=-BRIJ
      BTIJ=-BTIJ

  210 AC(I,J)=AC(I,J)+BIJ
	IF(AC(I,J).GT.0.9999) AC(I,J)=1.0
	IF(AC(I,J).LT.0.0001) AC(I,J)=0.0
	AR(I,J)=AR(I,J)+BRIJ
	IF(AR(I,J).GT.0.9999) AR(I,J)=1.0
	IF(AR(I,J).LT.0.0001) AR(I,J)=0.0
	AT(I,J)=AT(I,J)+BTIJ
	IF(AT(I,J).GT.0.9999) AT(I,J)=1.0
	IF(AT(I,J).LT.0.0001) AT(I,J)=0.0
  220	CONTINUE
  230 CONTINUE
  240	CONTINUE
	DO 280 J=2,JM1
	IF(KL.GT.2) GO TO 270
	AR(1,J)=0.0
	AT(1,J)=0.0
	AC(1,J)=EM10
  270	IF(KR.GT.2) GO TO 280
	AR(IM1,J)=0.0
	AR(IMAX,J)=0.0
	AT(IMAX,J)=0.0
	AC(IMAX,J)=EM10
  280 CONTINUE
	DO 300 I=2,IM1
	IF(KB.GT.2) GO TO 290
	AT(I,1)=0.0
	AR(I,1)=0.0
	AC(I,1)=EM10
  290	IF(KT.GT.2) GO TO 300
	AT(I,JM1)=0.0
	AR(I,JMAX)=0.0
	AT(I,JMAX)=0.0
	AC(I,JMAX)=EM10
  300	CONTINUE
	DO 310 J=2,JM1
	DO 310 I=2,IM1
	IF(AC(I,J).GT.EM6) GO TO 310
	AR(I,J)=0.0
	AR(I-1,J)=0.0
	AT(I,J)=0.0
	AT(I,J-1)=0.0
	BETA(I,J)=-1.0
  310 CONTINUE
C
C	SET AR AND AT VALUES FOR IN AND OUT FLOW BOUNDARY SEGMENTS
C	HERE AS UPDATE MODIFICATION DEPENDING ON APPLICATION
C
C
C	START OF CURVED WALL OPTION SECTION
C
	DO 330 J=2,JM1
	DO 330 I=2,IM1
C
C	WE DEFINE ARRAY NW, WHICH LOCATES CURVED WALL IN A PARTIAL FLOW
C	CELL. DEFINITIONS TERMINATE AT: 315 CONTINUE
C	WE DEFINE ANGLE PHI THAT CURVED WALL MAKES WITH +Y AXIS. DEFINIT-
C	IONS TERMINATE AT: 325 COSO...
C	WE INTRODUCE DEFAULT VALUES FOR PHI AND NW
C
	PHI=CANGLE
	NW(I,J)=0
C
C	FOR FLUID CELL OR OBSTACLE CELL USE DEFAULT VALUES FOR PHI AND NW
C	BYPASS ALL OF DO LOOPS EXCEPT FOR DEFINING TRIG. FACTORS
C
	IF(AC(I,J).LT.EM6.OR.BETA(I,J).LT.0.0) GO TO 325
	IF(AC(I,J).GT.EM61) GO TO 325
C
C	SET NW FOR CELL
C
C	SET NW ARRAY FOR CELLS WITH TWO COMPLETELY CLOSED BOUNDARIES
C
	IF(AR(I,J).LT.EM6.AND.AT(I,J).LT.EM6) NW(I,J)=5
	IF(AR(I,J).LT.EM6.AND.AT(I,J-1).LT.EM6) NW(I,J)=6
C
C	SET NW ARRAY FOR CELLS WITH EXACTLY ONE CLOSED BOUNDARY
C
	IF(AR(I,J).LT.EM6.AND.NW(I,J).LT.5) NW(I,J)=1
	IF(AR(I-1,J).LT.EM6.AND.AT(I,J).GT.EM6.AND.AT(I,J-1).GT.
     1 EM6) NW(I,J)=2
	IF(AT(I,J).LT.EM6.AND.AR(I,J).GT.EM6.AND.AR(I-1,J).
     1 GT.EM6) NW(I,J)=3
	IF(AT(I,J).LT.EM6.AND.AR(I,J).GT.EM6.AND.I.EQ.2) NW(I,J)=3
	IF(AT(I,J-1).LT.EM6.AND.AR(I,J).GT.EM6.AND.AR(I-1,J).GT.
     1 EM6) NW(I,J)=4
C
C	SET NW ARRAY FOR CELLS WHOSE NE OR SE CORNER IS CLOSED TO FLOW,
C	BUT WHICH HAS NO COMPLETELY CLOSED BOUNDARY
C	MORE INTRICATE NET OF IF STATEMENTS NEEDED TO ESTABLISH THIS CASE
	IF(AT(I,J-1).LT.EM6.AND.AR(I,J).GT.EM6.AND.I.EQ.2) NW(I,J)=4
	IF(AR(I-1,J).LE.EM61) GO TO 315
	IF(AR(I,J).GT.EM6.AND.AR(I,J).LT.EM61) GO TO 305
	GO TO 315
  305	IF(AT(I,J-1).GT.EM61.AND.AT(I,J).GT.EM6.AND.AT(I,J).LT.
     1 EM61) NW(I,J)=7
	IF(AT(I,J).GT.EM61.AND.AT(I,J-1).GT.EM6.AND.AT(I,J-1).LT.
     1 EM61) NW(I,J)=8
  315 CONTINUE
C
C	CALCULATE APPROPRIATE ANGLE FOR CURVED BOUNDARY
C
C
C
C	DEFINE FOR USE IN IF STATEMENTS: NON-INDEXED VARIABLE NWW=NW(I,J)
C
	NWW=NW(I,J)
C
C	IF NW=0 OR 2, BYPASS REDEFINITION OF PHI AND COMPUTE SINO AND
C	COSO FROM DEFAULT VALUE: OTHERWISE REDEFINE PHI. STARTING AT 320
C
	IF(NWW.EQ.0) GO TO 325
	GO TO (320,325,320,320,320,320,320,320),NWW
C
C
C	SPECIFY VARIABLES FOR USE IN DEFINING TAN(PHI) IN VARIOUS CASES,
C	INCLUDING DEFAULT TO AVOID DIVISION BY ZERO
C
C
  320	CRATIO=DELX(I)/DELY(J)
	CELDEN=AR(I,J)-AR(I-1,J)
	IF(ABS(CELDEN).LT.0.001) CELDEN=0.001
C
C	RECOMPUTE PHI IN FOUR STRAIGHTFOREWARD CASES: NW=1,6,3,OR 4
C	FOR NW .NE. 1, CONVERT NEGATIVE PHI TO PHI IN SECOND QUADRANT
	IF(NWW.EQ.1) PHI=ATAN(CRATIO*(AT(I,J)-AT(I,J-1)))
	IF(NWW.EQ.6) PHI=ATAN(CRATIO*(AT(I,J)/AR(I-1,J)))
	IF(NWW.EQ.3) PHI=ATAN(CRATIO/CELDEN)
	IF(NWW.EQ.4) PHI=ATAN(-CRATIO/CELDEN)
	IF(NWW.NE.1.AND.PHI.LT.0.0) PHI=PI+PHI
C
C	WE NEED WALL ADHESION OPTION EVEN FOR NW=7 OR 8 CELLS: SO
C	RECOMPUTE PHI FOR THESE CASES HERE
C
	IF(NWW.EQ.8) PHI=ATAN(CRATIO*((1.0-AT(I,J-1))/(1.0-AR(I,J))))
	IF(NWW.EQ.7) PHI=ATAN2(CRATIO*(1.0-AT(I,J)),(AR(I,J)-1.0))
	IF(NWW.NE.5) GO TO 325
C
C	SIMPLEST FORMAT FOR NW=5 IS SLIGHTLY DIFFERENT FROM THAT OF 
C	OTHER CASES: SO TREAT NW=5 SEPARATELY HERE
C
	PHI=PI-ATAN(CRATIO*(AT(I,J-1)/AR(I-1,J)))
C
C
C	EVALUATE TRIG. FACTORS USING EITHER THE DEFAULT PHI OR THE 
C	RECALCULATED PHI, AS APPROPRIATE
C
  325	COSO(I,J)=COS(PHI)
	SINO(I,J)=SIN(PHI)
  330 CONTINUE
	RETURN
	END


	SUBROUTINE BC
	INCLUDE "PARAM.FI"
C
C	SET BOUNDARY CONDITIONS
C
	DO 100 J=1,JMAX
	F(1,J)=F(2,J)
	F(IMAX,J)=F(IM1,J)
	P(1,J)=P(2,J)
	P(IMAX,J)=P(IM1,J)
	GO TO (10,20,30,40,30), KL
   10 U(1,J)=0.0
      V(1,J)=V(2,J)
	GO TO 50
   20 U(1,J)=0.0
      V(1,J)=-V(2,J)*DELX(1)/DELX(2)
	GO TO 50
   30 IF (ITER.GT.0) GO TO 50
      U(1,J)=U(2,J)*(X(2)*RX(1)*CYL+1.0-CYL)
	V(1,J)=V(2,J)
	GO TO 50
   40 U(1,J)=U(IBAR,J)
      V(1,J)=V(IBAR,J)
	F(1,J)=F(IBAR,J)
   50 GO TO (60,70,80,90,80), KR
   60 U(IM1,J)=0.0
      V(IMAX,J)=V(IM1,J)
	GO TO 100
   70 U(IM1,J)=0.0
      V(IMAX,J)=-V(IM1,J)*DELX(IMAX)/DELX(IM1)
	GO TO 100
   80 IF (ITER.GT.0) GO TO 100
      U(IM1,J)=U(IBAR,J)*(X(IBAR)*RX(IM1)*CYL+1.0-CYL)
	V(IMAX,J)=V(IM1,J)
	GO TO 100
   90 U(IM1,J)=U(2,J)
      V(IM1,J)=V(2,J)
	P(IM1,J)=P(2,J)
	PS(IM1,J)=PS(2,J)
	F(IM1,J)=F(2,J)
	V(IMAX,J)=V(3,J)
	F(IMAX,J)=F(3,J)
  100 CONTINUE
      DO 200 I=1,IMAX
	F(I,1)=F(I,2)
	F(I,JMAX)=F(I,JM1)
	P(I,1)=P(I,2)
	P(I,JMAX)=P(I,JM1)
	GO TO (110,120,130,140,130), KT
  110 V(I,JM1)=0.0
      U(I,JMAX)=U(I,JM1)
	GO TO 150
  120 V(I,JM1)=0.0
      U(I,JMAX)=-U(I,JM1)*DELY(JMAX)/DELY(JM1)
	GO TO 150
  130 IF (ITER.GT.0) GO TO 150
      V(I,JM1)=V(I,JBAR)
	U(I,JMAX)=U(I,JM1)
	GO TO 150
  140	V(I,JM1)=V(I,2)
	U(I,JM1)=U(I,2)
	P(I,JM1)=P(I,2)
	PS(I,JM1)=PS(I,2)
	F(I,JM1)=F(I,2)
	U(I,JMAX)=U(I,3)
	F(I,JMAX)=F(I,3)
  150 GO TO (160,170,180,190,180), KB
  160	V(I,1)=0.0
      U(I,1)=U(I,2)
	GO TO 200
  170 V(I,1)=0.0
   	U(I,1)=-U(I,2)*DELY(1)/DELY(2)
	GO TO 200
  180	IF (ITER.GT.0) GO TO 200
      V(I,1)=V(I,2)
	U(I,1)=U(I,2)
	GO TO 200
  190 V(I,1)=V(I,JBAR)
      U(I,1)=U(I,JBAR)
	F(I,1)=F(I,JBAR)
  200 CONTINUE

C
C	FREE SURFACE AND SLOPED BOUNDARY CONDITION
C
	
	DO 420 I=2,IM1
	DO 420 J=2,JM1
	IF (BETA(I,J).GT.0.0) GO TO 210
	BMR=0.0
	BMT=0.0
	BML=0.0
	BMB=0.0
	F(I,J)=0.0
	P(I,J)=0.0
	IF(BETA(I+1,J).GT.0.0) BMR=1.0
	IF(BETA(I,J+1).GT.0.0) BMT=1.0
	IF(BETA(I-1,J).GT.0.0) BML=1.0
	IF(BETA(I,J-1).GT.0.0) BMB=1.0
	BMTOT=BMR+BMT+BML+BMB
	IF(BMTOT.LE.0.0) GO TO 420
	F(I,J)=(BMR*F(I+1,J)+BMT*F(I,J+1)+BML*F(I-1,J)+BMB*F(I,J-1))/BMTOT
	P(I,J)=(BMR*P(I+1,J)+BMT*P(I,J+1)+BML*P(I-1,J)+BMB*P(I,J-1))/BMTOT
	GO TO 420
  210 CONTINUE
	IF(NF(I,J).EQ.0.OR.NF(I,J).GT.5) GO TO 420
	IF(I.EQ.2.AND.KL.EQ.5) GO TO 380
	IF(I.EQ.IM1.AND.KR.EQ.5) GO TO 380
	IF(J.EQ.JM1.AND.KT.EQ.5) GO TO 380
	IF(J.EQ.2.AND.KB.EQ.5) GO TO 380
	IF(NF(I+1,J).LT.6.OR.AR(I,J).LT.EM6) GO TO 240
	U(I,J)=U(I,J)*AR(I-1,J)*R(I-1)/(AR(I,J)*R(I))
  240 IF(NF(I,J+1).LT.6.OR.AT(I,J).LT.EM6) GO TO 250
	V(I,J)=V(I,J-1)
  250 IF(NF(I-1,J).LT.6.OR.AR(I-1,J).LT.EM6) GO TO 260
	U(I-1,J)=U(I,J)*AR(I,J)*R(I)/(AR(I-1,J)*R(I-1))
  260 IF(NF(I,J-1).LT.6.OR.AT(I,J-1).LT.EM6) GO TO 270
	V(I,J-1)=V(I,J)
  270 NFF=NF(I,J)
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*R(I)*V(I,J)-AT(I,J-1)*R(I)*V(I,J-1))
	LOOP=0
  300 GO TO (310,320,330,340,350),NFF
  310 IF(NF(I+1,J).LT.6.OR.AR(I,J).LT.EM6) GO TO 350
	U(I,J)=U(I,J)-DELX(I)*DIJ/(AR(I,J)*R(I))
	GO TO 380
  320 IF(NF(I-1,J).LT.6.OR.AR(I-1,J).LT.EM6) GO TO 350
	U(I-1,J)=U(I-1,J)+DELX(I)*DIJ/(AR(I-1,J)*R(I-1))
	GO TO 380
  330 IF(NF(I,J+1).LT.6.OR.AT(I,J).LT.EM6) GO TO 350
	V(I,J)=V(I,J)-DELY(J)*DIJ/(AT(I,J)*R(I))
	GO TO 380
  340 IF(NF(I,J-1).LT.6.OR.AT(I,J-1).LT.EM6) GO TO 350
	V(I,J-1)=V(I,J-1)+DELY(J)*DIJ/(AT(I,J-1)*R(I))
	GO TO 380
  350 NFF=NFF+1
	IF(NFF.GT.4) NFF=1
	LOOP=LOOP+1
	IF(LOOP.LE.4) GO TO 300
C
C	SET VELOCITIES IN EMPTY CELLS ADJACENT TO PARTIAL FLUID CELLS
  380 CONTINUE
	IF(FLG.GT.0.5.AND.ITER.GT.0.AND.ISOR.EQ.1) GO TO 420
	IF(F(I+1,J).GT.EMF) GO TO 390 
	IF(F(I+1,J+1).LT.EMF.AND.AT(I+1,J).GT.EM6) V(I,J+1)=F(I,J)*V(I,J)
	IF(F(I+1,J-1).LT.EMF.AND.AT(I+1,J-1).GT.EM6) V(I+1,J-1)=V(I,J-1)
     1*F(I,J)
  390 IF(F(I,J+1).GT.EMF) GO TO 400
	IF(F(I+1,J+1).LT.EMF.AND.AR(I,J+1).GT.EM6) U(I,J+1)=F(I,J)*U(I,J)
	IF(F(I-1,J+1).LT.EMF.AND.AR(I-1,J+1).GT.EM6) U(I-1,J+1)=U(I-1,J)
     1*F(I,J)
  400 IF(F(I-1,J).GT.EMF) GO TO 410
	IF(F(I-1,J+1).LT.EMF.AND.AT(I-1,J).GT.EM6) V(I-1,J)=F(I,J)*V(I,J)
	IF(F(I-1,J-1).LT.EMF.AND.AT(I-1,J-1).GT.EM6) V(I-1,J-1)=V(I,J-1)
     1*F(I,J)
  410 IF(F(I,J-1).GT.EMF) GO TO 420
	IF(F(I+1,J-1).LT.EMF.AND.AR(I,J-1).GT.EM6) U(I,J-1)=F(I,J)*U(I,J)
	IF(F(I-1,J-1).LT.EMF.AND.AR(I-1,J-1).GT.EM6) U(I-1,J-1)=U(I-1,J)
     1*F(I,J)
	
  420 CONTINUE

C 
C SPECIAL VELOCITY BOUNDARY CONDITIONS
C 						 			 	  

	RETURN
	END
	


         


     


	SUBROUTINE CAVOVO
	INCLUDE "PARAM.FI"
C 
C     CALCULATE VOID VOLUMES
C
C	INITIALIZE VOID VOLUMED
C
      DO 10 K=1,NVOR
   10 VOL(K)=0.0
C 
C     COMPUTE VOID REGION VOLUMED
C
      DO 30 J=2,JM1
	DO 30 I=2,IM1
	INF=NF(I,J)
	IF (INF.GT.NVOR) GO TO 40
	IF (INF.EQ.0.OR.BETA(I,J).LT.0.0) GO TO 30
	VOLA=(1.0-F(I,J))*AC(I,J)*TPI*RI(I)*DELX(I)*DELY(J)
	IF (INF.GT.5) GO TO 20
	INFR=NF(I+1,J)
	INFT=NF(I,J+1)
	INFL=NF(I-1,J)
	INFB=NF(I,J-1)
	INF=MAX0(INFR,INFT,INFL,INFB)
   20 VOL(INF)=VOL(INF)+VOLA
   30 CONTINUE
      RETURN
   40 CONTINUE
      WRITE (59,50) I,J,INF,NVOR,NCYC
	WRITE (12,50) I,J,INF,NVOR,NCYC
!	CALL EXITLDC ("CAVOVO")
C
   50 FORMAT (1X, 5H*****, 1X, 25HNVOR IS TOO SMALL - I,J = , 2I5, 1X, 
     1 4HNF =, I5 , 1X, 6HNVOR =, I5, 1X, 7HCYCLE =, I7)
      END
	
	
	
	SUBROUTINE DELTADJ
	INCLUDE "PARAM.FI"
	DATA LITER/15/
	DATA ITMIN/5/,ITMOST/30/
	DATA ITCJR/100/
C 
C     DELT (TIME STEP) ADJUSTMENT
C
      DELTN=DELT
	IF (FLGC.LT.0.5) GO TO 20
	T=T-DELT
	NCYC=NCYC-1
	DELT=0.8*DELT
	DO 10 I=1,IMAX
	DO 10 J=1,JMAX
	P(I,J)=PN(I,J)
	F(I,J)=FN(I,J)
	U(I,J)=0.0
	V(I,J)=0.0
   10 CONTINUE
      FLGC=0.0
	NFLGC=NFLGC+1
   20 CONTINUE
      IF (AUTOT.LT.0.5.AND.FNOC.LT.0.5) GO TO 40
	DUMX=EM10
	DVMX=EM10
	IF (FNOC.GT.0.5) DELT=DELT*0.8
	DO 30 I=1,IM1
	DO 30 J=2,JM1
	UDM=ABS(UN(I,J))/(XI(I+1)-XI(I))
	VDM=ABS(VN(I,J))/(YJ(J+1)-YJ(J))
	DUMX=AMAX1(DUMX,UDM)
	DVMX=AMAX1(DVMX,VDM)
   30 CONTINUE
      DTMP=1.01
	IF(ITER.LT.ITMIN) DTMP=1.02
	IF(ISOR.EQ.0) GO TO 32
	IF(ITER.GT.ITMOST.AND.LITER.GT.ITMOST) DTMP=0.99
	GO TO 34
   32 IF(ITER.GT.ITCJR.AND.LITER.GT.ITCJR) DTMP=0.99
   34 CONTINUE
      DELTO=DELT+DTMP !!!????
	DELTO=AMIN1(DELTO,DTCRMX)
	DELT=AMIN1(DELTO,CON/DUMX,CON/DVMX,DTVIS,DTSFT)
	IF (IMOVY.GT.0) DELT=AMIN1(DELT,PLTDT)
   40 IF (DELT.EQ.DELTN) GO TO 60
      DO 50 I=2,IM1
      DO 50 J=2,JM1
	IF (AC(I,J).LT.EM6) GO TO 50
	RHXR=RHOF*(DELX(I+1)+DELX(I))
	RHXL=RHOF*(DELX(I)+DELX(I-1))
	RHYT=RHOF*(DELY(J+1)+DELY(J))
	RHYB=RHOF*(DELY(J)+DELY(J-1))
	XX=DELT*RDX(I)*(2.0*AR(I-1,J)*R(I-1)/RHXL+2.0*AR(I,J)*R(I)/RHXR)+ !!!!????
     1DELT*RDY(J)*(2.0*AT(I,J)*RI(I)/RHYT+2.0*AT(I,J-1)*RI(I)/RHYB)
	XX=XX/(AC(I,J)*RI(I))
	BETA(I,J)=OMG/XX
   50 CONTINUE
   60 CONTINUE
      LITER=ITER
	RETURN
	END

     	 
       

c
      SUBROUTINE DRAW

	END

	SUBROUTINE DRWOBS

	END
	
	SUBROUTINE DRWVEC(XONE,YONE,XTWO,YTWO,ISYM)

	END


      SUBROUTINE DVCAL
	INCLUDE "PARAM.FI"

	DATA ISLIP/0/
C     ISLIP=0 FREE-SLIP-LIKE FOR CURVED INTERIOR BOUNDARIES
C
C
C     ISLIP=1 STANDARC FREE SLIP CONDITION MOST CODES
C
      DUDR=(UN(I+1,J)-UN(I,J))*RDX(I+1)
	DUDL=(UN(I,J)-UN(I-1,J))*RDX(I)
	DUDT=(UN(I,J+1)-UN(I,J))*2.0/(DELY(J)+DELY(J+1))
      DUDB=(UN(I,J)-UN(I,J-1))*2.0/(DELY(J)+DELY(J-1))
      DVDR=(VN(I+1,J)-VN(I,J))*2.0/(DELX(I)+DELX(I+1))
	DVDL=(VN(I,J)-VN(I-1,J))*2.0/(DELX(I)+DELX(I-1))
	DVDT=(VN(I,J+1)-VN(I,J))*RDY(J+1)
	DVDB=(VN(I,J)-VN(I,J-1))*RDY(J)
C
      IF(ISLIP.NE.0) GO TO 20
	IF(AR(I+1,J).LT.EM6)DUDR=0.0
      IF(AR(I-1,J).LT.EM6)DUDL=0.0
	IF(AR(I,J+1).LT.EM6)DUDT=0.0
      IF(AR(I,J-1).LT.EM6)DUDB=0.0
      IF(AT(I+1,J).LT.EM6)DVDR=0.0
      IF(AT(I-1,J).LT.EM6)DVDL=0.0
      IF(AT(I,J+1).LT.EM6)DVDT=0.0
      IF(AT(I,J-1).LT.EM6)DVDB=0.0
	GO TO 40
   20 IF(ISLIP.NE.1) GO TO 40
      IF(AR(I,J+1).LT.EM6) DUDT=0.0
      IF(AR(I,J-1).LT.EM6) DUDB=0.0
      IF(AT(I+1,J).LT.EM6) DVDR=0.0
      IF(AT(I-1,J).LT.EM6) DVDL=0.0
   40 CONTINUE
      RETURN
	END





	SUBROUTINE EQUIB (Y,Z,NX1,BOND,CANGLE,CYL)
	DIMENSION Y(NX1),Z(NX1)
	DATA PI/3.141592654/,EPS/1E-04/
C
C     USEFUL INTERMEDIATE QUANTITIES
C
C      RANGLE=CANGLE*PI/180.
C	COSTST=COS(RANGLE)
C	COSCA=(1.-CYL)*COS(RANGLE)
C	OMCYL=1.-CYL
C	NX=NX1-1
C	DR=1./FLOAT(NX) 
C	ITER=0
C
C     SET INITIAL GUESS FOR Y(1)
C
C      Y(1)=0
C	IF(ABS(BOND).GT.0.) Y(1)=-COSCA/(2.*ABS(BOND))
C
C     NUMERICAL INTEGRATION
C
C   10 Z(1)=0
C      ITER=ITER+1
C	Z(NX1+1)=0
C	WRITE (8.100) Y(1)
C	DO 20 J=2,NX1
C	RJM=DR*FLOAT(J-2)*CYL+OMCYL
C	RJ=DR*FLOAT(J-1)*CYL+OMCYL
C	RJH=0.5*(RJM+RJ)
C	Z(J)=Z(J-1)*RJM/RJ+DR*(RJH/RJ)*(COSCA-BOND*(Y(J-1)+0.5*DR*Z(J-1)
C     1 /SQRT(1.-Z(J-1)**2)))
C	IF (ABS(Z(J)).GE.1.) GO TO 30
CC	SLOPE=Z(J)/SQRT(1.-Z(J)**2)
C	SLOPF=Z(J-1)/SQRT(1.-Z(J-1)**2)
CC	Z(NX1+J)=(SLOPE-SLOPF)/(DR*(1.+SLOPE**2)**1.5)
C	Y(J)=Y(J-1)+0.5*DR*(Z(J)/SQRT(1.-Z(J)**2)+Z(J-1)/SQRT(1.-Z(J-1)**2
C     1 ))
C   20 CONTINUE
C      GO TO 40
C   30 CONTINUE
C      WRITE (8,110) J,Z(J)
C	Y(1)=Y(1)*1.05
C	WRITE(8,120) Z(NX1)
C	IF (ITER.GT.400) GO TO 60
C	GO TO 10
C
C     CHECK CONSTRAINT AND CONVERGENCE
C
C   40 CONTINUE
C      WRITE (8,130)
CC	YSUM=0.5*DR*Y(NX1)
C	DO 50 J=2,NX
C	YSUM=YSUM+(FLOAT(J-1)*DR*CYL+OMCYL)*DR*Y(J)
C   50 CONTINUE
C      WRITE (8,140) YSUM,Y(1),Z(NX1),COSTST
C	IF (ABS(Z(NX1)-COS(RANGLE)).LE.EPS.AND.BOND.NE.0) GO TO 70
C	IF (ABS(YSUM).LT.EPS.AND.BOND.EQ.0) GO TO 70
C	Y(1)=Y(1)-YSUM/(OMCYL+CYL*2.)
C	IF (ITER.GT.400) GO TO 60
C	GO TO 10
C
C     EXIT IF CONVERGENCE FAILS
C
C   60 CONTINUE
C      WRITE (59,150)
c	CALL EXITLDC ("EQUIB")
C   70 CONTINUE
      WRITE (8,80) (I,Y(I),Z(I),Z(NX1+I),I=1,NX1)
	WRITE (59,90)
	WRITE (8,90)
	RETURN
C
   80 FORMAT (///3X,1HI,8X,1HY,11X,1HZ,9X,3HKXY/(1X,I3,1P3E12.4))
   90 FORMAT (15H FINISHED EQUIB)
  100 FORMAT (1X,17HSTER B WITH Y(1)=,1PE14.6)
  110 FORMAT (1X,9HZ TOO BIG,I5,1PE12.4)
  120 FORMAT (1X,16HGO TO STEP B Z =,1PE12.4)
  130 FORMAT (1X,23HPARTS B AND C CONVERGED)
  140 FORMAT (1X,5HYSUM=,1PE13.5,4HY1 =,E13.5,4HZN =,E13.5,5HCOS =,
     1E13.5)
  150 FORMAT (1X,28H***EQUIB FAILED TO CONVERGE )
      END





	SUBROUTINE EXITLDC (IILDC)
	INCLUDE "PARAM.FI"
C	CALL ADV (1)
	CHARACTER(200) IILDC
	WRITE (59,10) NCYC,IILDC
	WRITE (12,10) NCYC, IILDC
	CALL EXIT
C
   10 FORMAT (1X,20HTERMINATION ON CYCLE,I7,6HFROM  ,A8)
      END




	SUBROUTINE FRAME (XXL,XXR,YYT,YYB)
C
C     DRAW A FRAME AROUND THE PLOT
C
      CALL DRWVEC (XXL,YYT,XXR,YYT,0)
	CALL DRWVEC (XXL,YYT,XXL,YYB,0)
      CALL DRWVEC (XXL,YYB,XXR,YYB,0)
	CALL DRWVEC (XXR,YYB,XXR,YYT,0)
      RETURN
	END




	SUBROUTINE LAVORE
	INCLUDE "PARAM.FI"
C    
C     LABEL VOID REGIONS - - VDID REGIONS ARE NF, EQ.6 AND ABOVE
C
      NNR=6
	NVR=6
	DO 30 J=2,JM1
	DO 30 I=2,IM1
	IF (NF(I,J).LT.6) GO TO 30
	INFB=NF(I,J-1)
	INFL=NF(I-1,J)
	IF (INFB.LT.6.AND.INFL.LT.6) GO TO 20
      IF (INFB.LT.6.OR.INFL.LT.6) GO TO 10
	NF(I,J)=MIN0(INFB,INFL)
	INRB=NR(INFB)
      INRL=NR(INFL)
	INRMN=MIN0(INRB,INRL)
      INRMX=MAX0(INRB,INRL)
	NR(INRMX)=INRMN
      NR(INFB)=INRMN
	NR(INFL)=INRMN
	GO TO 30
   10 NF (I,J)=INFB
      IF (INFB.LT.6) NF(I,J)=INFL
	GO TO 30
   20 NF (I,J)=NVR
      NR(NVR)=NNR
	NVR=NVR+1
      NNR=NNR+1
	IF(NNR.LE.NVOR) GO TO 30
C
C     NVOR TOO SMALL
C
      WRITE (59,70) I,J,NNR,NVOR,NCYC
      WRITE (12,70) I,J,NNR,NVOR,NCYC
c	CALL EXITLDC ("LAVORE")
C
   70 FORMAT (1X,5H*****,1X,25HNVOR IS TOO SMALL - I,J= ,2I5,1X,4HNF =
     1 ,I5,1X,6HNVOR =,I5,1X,7HCYCLE =,I7)
   30 CONTINUE
      NVR1=NVR-1
	NNR1=NNR-1
C	REDUCE NR TO LOWEST VALUE

	DO 38 K=6,NVR1
	KK=NVR1+6-K
	KN=KK
   32 IF(NR(KN).EQ.KN) GO TO 34
      KN=NR(KN)
	GO TO 32
   34 NR(KK)=KN
   38 CONTINUE
C 
C     REDEFINE REGION NUMBERS TO BE CONSECUTIVE
C
      KKN=6
	DO 50 KK=6,NNR1
	KFLG=0
	DO 40 K=KK,NVR1
	IF (NR(K).NE.KK) GO TO 40
	NR(K)=KKN
	KFLG=1
   40 CONTINUE
      IF (KFLG.EQ.1) KKN=KKN+1 !!!
   50 CONTINUE
      NREG=KKN-6
C
C     REDEFINE VOLD NUMBERS TO BE CONSECUTIVE IF NREG,GT,1
C     CHECK FOR CORRESPONDENCE WITH DLD REGIONS
C
      DO 60 J=2,JM1
	DO 60 I=2,IM1
	INF=NF(I,J)
	IF (INF.LT.6) GO TO 60
	NF(I,J)=NR(INF)
   60 CONTINUE
      RETURN
	END





	SUBROUTINE MESHSET
	INCLUDE "PARAM.FI"
C
C     MESH SETUP (GENERATION)
C
      I=1
	J=1
	X(1)=XL(1)
	Y(1)=YL(1)
	DO 40 K=1,NKX
	IF (NXL(K).EQ.0) GO TO 20
	DXML=(XC(K)-XL(K))/NXL(K)
	NT=NXL(K)
	TN=NT
	TN=AMAX1(TN,1.0+EM6)
	DXMN1=AMIN1(DXMN(K),DXML)
	CMC=(XC(K)-XL(K)-TN*DXMN1)*TN/(TN-1.0)
	IF (NT.EQ.1) CMC=0.0
	BMC=XC(K)-XL(K)-CMC
	DO 10 L=1,NT
	I=I+1
	RLN=(FLOAT(L)-TN)/TN
   10 X(I)=XC(K)+BMC*RLN-CMC*RLN*RLN
   20 IF (NXR(K).EQ.0) GO TO 40
      DXMR=(XL(K+1)-XC(K))/NXR(K)
	NT=NXR(K)
	TN=NT
	TN=AMAX1(TN,1.0+EM6)
	DXMN1=AMIN1(DXMN(K),DXMR)
	CMC=(XL(K+1)-XC(K)-TN*DXMN1)*TN/(TN-1.0)
	IF (NT.EQ.1) CMC=0.0
	BMC=XL(K+1)-XC(K)-CMC
	DO 30 L=1,NT
	I=I+1
	RLN=FLOAT(L)/TN
   30 X(I)=XC(K)+BMC*RLN+CMC*RLN*RLN
   40 CONTINUE
      IF (KR.NE.4) GO TO 50
	I=I+1
	X(I)=X(I-1)+X(2)-X(1)
   50 CONTINUE
      DO 90 K=1,NKY
	IF (NYL(K).EQ.0) GO TO 70
	DYML=(YC(K)-YL(K))/NYL(K)
	NT=NYL(K)
	TN=NT
	TN=AMAX1(TN,1.0+EM6)
	DYMN1=AMIN1(DYMN(K),DYML)
	CMC=(YC(K)-YL(K)-TN*DYMN1)*TN/(TN-1.0)
	IF (NT.EQ.1) CMC=0.0
	BMC=YC(K)-YL(K)-CMC
	DO 60 L=1,NT
	J=J+1
	RLN=(FLOAT(L)-TN)/TN
   60 Y(J)=YC(K)+BMC*RLN-CMC*RLN*RLN
   70 IF (NYR(K).EQ.0) GO TO 90
      DYMR=(YL(K+1)-YC(K))/NYR(K)
	NT=NYR(K)
	TN=NT
	TN=AMAX1(TN,1.0+EM6)
	DYMN1=AMIN1(DYMN(K),DYMR)
	CMC=(YL(K+1)-YC(K)-TN*DYMN1)*TN/(TN-1.0)
	IF (NT.EQ.1) CMC=0.0
	BMC=YL(K+1)-YC(K)-CMC
	DO 80 L=1,NT
	J=J+1
	RLN=FLOAT(L)/TN
   80 Y(J)=YC(K)+BMC*RLN+CMC*RLN*RLN
   90 CONTINUE
      IF (KT.NE.4) GO TO 100
	J=J+1
	Y(J)=Y(J-1)+Y(2)-Y(1)
  100 CONTINUE
      NUMX=I
	NUMY=J
	NUMXM1=NUMX-1
      NUMYM1=NUMY-1
      NUMXP1=NUMX+1
      NUMYP1=NUMY+1
	IBAR=NUMX-1
	JBAR=NUMY-1
	IMAX=IBAR+2
	JMAX=JBAR+2
	IM1=IMAX-1
	JM1=JMAX-1
	IM2=IMAX-2
	JM2=JMAX-2
C
C     CALCULATE VALUES NEEDED FOR VARIABLE MESH
C
      DO 120 I=1,NUMX
	IF (X(I).EQ.0.0) GO TO 110
	RX(I)=1.0/X(I)
	GO TO 120
  110 RX(I)=0.0
  120 CONTINUE
      DO 130 I=2,NUMX
	XI(I)=0.5*(X(I-1)+X(I))
	DELX(I)=X(I)-X(I-1)
	RXI(I)=1.0/XI(I)
  130 RDX(I)=1.0/DELX(I)
      DELX(1)=DELX(2)
	XI(1)=XI(2)-DELX(2)
	RXI(1)=1.0/XI(1)
	RDX(1)=1.0/DELX(1)
	DELXA=DELX(NUMX)
	IF (KR.EQ.4) DELXA=DELX(3)
	DELX(NUMXP1)=DELXA
	XI(NUMXP1)=XI(NUMX)+DELXA
	X(NUMXP1)=XI(NUMXP1)+0.5*DELX(NUMXP1)
	RXI(NUMXP1)=1.0/XI(NUMXP1)
      RDX(NUMXP1)=1.0/DELX(NUMXP1)
	DO 140 I=2,NUMY
	YJ(I)=0.5*(Y(I-1)+Y(I))
	RYJ(I)=1.0/YJ(I)
	DELY(I)=Y(I)-Y(I-1)
	RDY(I)=1.0/DELY(I)
  140 CONTINUE
      DELY(1)=DELY(2)
	RDY(1)=1.0/DELY(1)
	YJ(1)=YJ(2)-DELY(2)
	RYJ(1)=1.0/YJ(1)
	DELYA=DELY(NUMY)
	IF (KT.EQ.4) DELYA=DELY(3)
	DELY(NUMYP1)=DELYA
	YJ(NUMYP1)=YJ(NUMY)+DELYA
	Y(NUMYP1)=YJ(NUMYP1)+0.5*DELY(NUMYP1)
	RYJ(NUMYP1)=1.0/YJ(NUMYP1)
	RDY(NUMYP1)=1.0/DELY(NUMYP1)
C
C     SET R AND RI ARRAY FOR PLANE OR CYLINDRICAL GEOMETRY
      DO 145 I=1,IMAX
	R(I)=X(I)
	RI(I)=XI(I)
	IF(ICYL.EQ.1) GO TO 145
	R(I)=1.0
	RI(I)=1.0
  145 CONTINUE
      WRITE (6,210)
	DO 150 I=1,NUMXP1
	WRITE (6,220) I,X(I),I,RX(I),I,DELX(I),I,RDX(I),I,XI(I),I,RXI(I)
  150 CONTINUE
      WRITE (6,210)
	DO 160 I=1,NUMYP1
	WRITE (6,230) I,Y(I),I,DELY(I),I,RDY(I),I,YJ(I),I,RYJ(I)
  160 CONTINUE
      IF (IMOVY.EQ.1) GO TO 190
	WRITE (12,210)
	DO 170 I=1,NUMXP1
	WRITE (12,220) I,X(I),I,RX(I),I,DELX(I),I,RDX(I),I,XI(I),I,RXI(I)
  170 CONTINUE
      WRITE (12,210)
	DO 180 I=1,NUMYP1
	WRITE (12,230) I,Y(I),DELY(I),I,RDY(I),I,YJ(I),I,RYJ(I)
  180 CONTINUE
  190 CONTINUE
C     
C     TEST ARRAY SIZE
C 
      IF (IMAX.LE.IBAR2.AND.JMAX.LE.JBAR2.AND.ISOR.EQ.1) GO TO 200
      IF (IMAX.EQ.IBAR2.AND.JMAX.EQ.JBAR2.AND.ISOR.EQ.0) GO TO 200
	WRITE (6,240)
C
c      CALL EXITLDC ("MESHSET")
C
  200 CONTINUE
      RETURN
C
  210 FORMAT (1H1)
  220 FORMAT (1X,2HX(,I2,2H)=,1PE12.5,2X,3HRX(,I2,2H)=,1PE12.5,2X ,
	15HDELX(,I2,2H)=,1PE12.5,1X,4HRDX(,I2,2H)=,1PE12.5,2X,3HXI(,I2,2H)=
     2,1PE12.5,2X,4HRXI(,I2,2H)=,1PE12.5)
  230 FORMAT (1X,2HY(,I2,2H)=,1PE12.5,3X,5HDELY(,I2,2H)=,1PE12.5,3X,
     14HRDY(,I2,2H)=,1PE12.5,3X,3HYJ(,I2,2H)=,1PE12.5,3X,4HRYJ(,I2,2H)=,
     21PE12.5)
  240 FORMAT (45H NESH SIZE INCONSISTENT WITH ARRAY DIMENSIONS)
      END




	SUBROUTINE PETACAL  
	INCLUDE "PARAM.FI"
C 
C     DETERMINE THE PRESSURE INTERPOLATION FACTOR PETA
C     DETERMINE THE SURFACE TENSION PRESSURE AND
C     WALL ADHESION EFFECTS IN SURFACE CELLS
C
      DATA KTRAN/1/
C
      GO TO (1,4),KTRAN
C
C     RESET KTRAN: PICK UP GEOMETRIC AND TRIGOHOMETRIC FACTORS
C
    1 KTRAN=4
	FEWLIM=25.0/AMIN1(X(IM1),Y(JM1))
	FNSLIM=FEWLIM
	CSANG=COS(CANGLE)
	SANG=SIN(CANGLE)
    4 CONTINUE
C
C     SET DO LOOPS TO GIVE DEFAULT VALUES OF NF, PS, AND PETA IN ALL
C     CELLS: CELLS ARE FLUID CELLS, SURFACE TENSION PRESSURE IS ZERO AND
C     PETA = 1.0
C
      DO 10 I=1,IMAX
	DO 10 J=1,JMAX
	NF(I,J)=0
	PS(I,J)=0.0
   10 PETA(I,J)=1.0
C
C     DEFAULT VALUES ARE NOW AVAILABLE
CC    SET MAIN DO LOOPS FOR FINDING WHETHER (I,J) CELL IS A SURFACE
C     CELL; IF SC, LOOPS SET NF, CALCULATE PS AND PETA. LOOPS END AT 750
C
      DO 750 I=2,IM1
	DO 750 J=2,JM1
C
C     IF CELL IS OBSTACLE CELL SKIP TD END OF LOOPS
C
C
      IF (AC(I,J).LT.EM6.OR.BETA(I,J).LT.0.0) GO TO 750
C
C     DECLARE EMPTY CELL TO BE A VOID CELL
C
      IF (F(I,J).LT.EMF) NF(I,J)=6
C
C     IF CELL IS EMPTY (OR FULL BUT PSAT =0.0) SKIP TO END OF LOOPS;
C     CELLS WILL HEVE DEFAULT VALUES
C
      IF (F(I,J).LT.EMF.OR.(F(I,J).GT.EMF1.AND.PSAT.EQ.0.0)) GO TO 750
C
C     FOUR TESTS TO SEE WHETHER ONE OF THE FOUR NEIGHBOR CELLS IS BOTH
C     EMPTY AND OPEN TO FLOW FROM (I,J) CELL; IF SO, ENTER NAIN DO
C     LOOPS THRU 190
C
      IF (F(I+1,J).LT.EMF.AND.AR(I,J).GT.EM6) GO TO 190
      IF (F(I-1,J).LT.EMF.AND.AR(I-1,J).GT.EM6) GO TO 190
	IF (F(I,J+1).LT.EMF.AND.AT(I,J).GT.EM6) GO TO 190
	IF (F(I,J-1).LT.EMF.AND.AT(I,J-1).GT.EM6) GO TO 190
C
C     CELL IS NOT A SURFACE CELL, OBSTACLE CELL,EMPTY CELL OR PARTIC-
C     ULAR TYPE OF FULL CELL. IF IT SATISFIES PRESSURE TEST, SET NF = 5
C     FOR ISOLATED CELL AND SKIP TO END OF LOOPS; OTHERWISE CELL IS
C     FLUID CELL AND WE SKIP TO END OF LOOPS WITH DEFAULT VALUES
C
      IF (P(I,J).LE.PSAT*EM6P1.AND.PSAT.GT.0.0) NF(I,J)=5
	GO TO 750
C
C     WE NOW ENTER CALCULATIONAL PARTS OF MAIN DO LOOPS
C
  190 CONTINUE
C
C     ***CALKULATE THE PARTIAL DERIVATIVES OF F
C
C
C     DISTANCES FROM MIDPOINT OF CELL TO MIDPOINT OF NEIGHBOR CELLS
C     DISTANCE TO RIGHT AND LEFT NEIGHBORS
C
      DXR=0.5*(DELX(I)+DELX(I+1))
      DXL=0.5*(DELX(I)+DELX(I-1))
C
C     DISTANCE TO TOP AND BOTTOM NEIGHBORS
C
      DYT=0.5*(DELY(J)+DELY(J+1))
      DYB=0.5*(DELY(J)+DELY(J-1))
C
C     DENOMINATORS FOR FINITE DIFFERENCE FORMULAS FOR PARTIAL
C     DERIVATIVES IN X AND Y DIRECTIONS
C
      RXDEN=1.0/(DXR*DXL*(DXR+DXL))
	RYDEN=1.0/(DYT*DYB*(DYT+DYB))
C
C     FOFM (AND FOFP) INDICATE WHETHER CELLS WITH LESSER (GREATER) IN-
C     DICES CONTRIBUTE TO AVERAGE FLUID HEIGHTS IN TREE CELL ARRAY
C     FOFM=1.0 WHEN CELL CONTRIBUTES:=0.0 OTHERWISE
C     INDEX IS J FOR VERTICAL HEIGHTS; I FOR HORIZONTAL HEIGHTS
C     OBSTACLE CELL DOES NOT CONTRIBUTE IF NO FLUID IN NEIGHBOR CELL OF
C     THREE CELL ARRAY
C
      FOFM=1.0
	IF(BETA(I+1,J-1).LE.0.0.AND.F(I,J-1).LT.EMF) FOFM=0.0
	FOFP=1.0
	IF(BETA(I+1,J+1).LE.0.0.AND.F(I,J+1).LT.EMF) FOFP=0.0
C
C     Y FLUID HEIGHT IN CELLS TO RIGHT = AVFR
C     Y HEIGHTS MEASURED FROM FLOOR OF ( J-1 ) CELLS
C
      AVFR=(1.0+AC(I+1,J-1)*(F(I+1,J-1)-1.0))*FOFM*DELY(J-1)+
     1(1.0+AC(I+1,J)*(F(I+1,J)-1.0))*DELY(J)+
	2(1.0+AC(I+1,J+1)*(F(I+1,J+1)-1.0))*FOFP*DELY(J+1)
	FOFM=1.0
	IF(BETA(I-1,J-1).LE.0.0.AND.F(I,J-1).LT.EMF) FOFM=0.0
	FOFP=1.0
      IF(BETA(I-1,J+1).LE.0.0.AND.F(I,J+1).LT.EMF) FOFP=0.0
C
C     Y FLUID HEIGHT IN CELLS TO LEFT = AVFL
C
      AVFL=(1.0+AC(I-1,J-1)*(F(I-1,J-1)-1.0))*FOFM*DELY(J-1)+
     1(1.0+AC(I-1,J)*(F(I-1,J)-1.0))*DELY(J)+
	2(1.0+AC(I-1,J+1)*(F(I-1,J+1)-1.0))*FOFP*DELY(J+1)
	FOFM=1.0
      IF(BETA(I,J-1).LE.0.0.AND.F(I-1,J-1)+F(I+1,J-1).LT.EMF) FOFM=0.0
	FOFP=1.0
	IF(BETA(I,J+1).LE.0.0.AND.F(I-1,J+1)+F(I+1,J+1).LT.EMF) FOFP=0.0
C
C     Y FLUID HEIGHT IN CENTRAL CELLS * AVFCX
C
      AVFCX=(1.0+AC(I,J-1)*(F(I,J-1)-1.0))*FOFM*DELY(J-1)+
     1(1.0+AC(I,J)*(F(I,J)-1.0))*DELY(J)+
	2(1.0+AC(I,J+1)*(F(I,J+1)-1.0))*FOFP*DELY(J+1)
C
      FOFM=1.0
	IF(BETA(I-1,J+1).LE.0.0.AND.F(I-1,J).LT.EMF) FOFM=0.0
	FOFP=1.0
	IF(BETA(I+1,J+1).LE.0.0.AND.F(I+1,J).LT.EMF) FOFP=0.0
C
C     X FLUID WIDTH IN CELLS ABOVE = AVFT
C     X FLUID WIDTH MEASURED FROM FLOORN OF (I-1) CELLS
C
      AVFT=(1.0+AC(I-1,J+1)*(F(I-1,J+1)-1.0))*FOFM*DELX(I-1)+
     1(1.0+AC(I,J+1)*(F(I,J+1)-1.0))*DELX(I)+
	2(1.0+AC(I+1,J+1)*(F(I+1,J+1)-1.0))*FOFP*DELX(I+1)
	FOFM=1.0
	IF(BETA(I-1,J-1).LE.0.0.AND.F(I-1,J).LT.EMF) FOFM=0.0
	FOFP=1.0
	IF(BETA(I+1,J-1).LE.0.0.AND.F(I+1,J).LT.EMF) FOFP=0.0
C
C     X FLUID WIDTH IN CELLS BELOW = AVFB
C
      AVFB=(1.0+AC(I-1,J-1)*(F(I-1,J-1)-1.0))*FOFM*DELX(I-1)+
     1(1.0+AC(I,J-1)*(F(I,J-1)-1.0))*DELX(I)+
	2(1.0+AC(I+1,J-1)*(F(I+1,J-1)-1.0))*FOFP*DELX(I+1)
	FOFM=1.0
      IF(BETA(I-1,J).LE.0.0.AND.F(I-1,J-1)+F(I-1,J+1).LT.EMF) FOFM=0.0
	FOFP=1.0
	IF(BETA(I+1,J).LE.0.0.AND.F(I+1,J+1)+F(I+1,J-1).LT.EMF) FOFP=0.0
C
C     X FLUID WIDTH IN CENTRAL CELLS = AVFCY
C
      AVFCY=(1.0+AC(I-1,J)*(F(I-1,J)-1.0))*FOFM*DELX(I-1)+
     1(1.0+AC(I,J)*(F(I,J)-1.0))*DELX(I)+
	2(1.0+AC(I+1,J)*(F(I+1,J)-1.0))*FOFP*DELX(I+1)
C
C     AVFL SET BY CONVENTION IN FIRST COLUNN OF CELLS
C     IN BOTHX AND Y DIRECTIONS DBSTACLES ARE PLACED ON FLOOR FROM WHICH
C     DISTANCES ARE MEASURED;FLUID IS THEN ABOVE OBSTACLES
C     IF NF=2 OR 4 FLOOR IS AT TOP OF CELL; AT I+1 OR J+1 RESPECTIVELY
C
      IF(I.EQ.2) AVFL=AVFCX
C
C     THREE POINT FINITE DIFFERENCE FORMULAS FOR SURFACE SLOPES WITH
C     VARIABLE MESH SIZES; FORMULAS EXACT FOR QUADRATICS
C     SLOPE DH/DX FOR ALMOST HORIZONTAL FLUID = PFX
C
      PFX=RXDEN*((AVFR-AVFCX)*DXL**2+(AVFCX-AVFL)*DXR**2)
C
C     SLOPE DW/DY FOR ALMOST VERTICAL FLUID = PFY
C
      PFY=RYDEN*((AVFT-AVFCY)*DYB**2+(AVFCY-AVFB)*DYT**2)
C
C     PF * SUM OF SQUARES OF TANGENTS; USED AS FLAG TO DIFFERENTIATE
C     SURFACE CELLS FROM ISOLATED CELLS (NF=5)
C
      PF=PFX**2+PFY**2
C
C     IF PF VERY SMALL. CELL IS DECLARED ISOLATED (INSTEAD OF SURFACE)
C     AND WE CONTINUE; OTHERWISE GO 660
C
      IF (PF.GT.EM10) GO TO 660
C     
C     SET NF(I,J) AND P(I,J) FOR ISOLATED CELL; BYPASS DETERMINATION
C     OF PRESSURE INTERPOLATION CELL,CALCULATION OF SURFACE PRESSURE
C     AND CALCULATION OF PETA
C
  655 NF(I,J)=5
      P(I,J)=0.25*(P(I+1,J)+P(I,J+1)+P(I-1,J)+P(I,J-1))
C
C     HAVING SET NF AND P FOR THE ISOLATED CELL, WE NOW SKIP TO END OF
C     MAIN LOOPS
C 
      GO TO 750
  660 CONTINUE
C
C     FOR SURFACE CELLS WE PICK UP CALCULATIONS OF MAIN LOOPS; HAVENG
C     DETERMINED SLOPES AND SOME AUXILIARY QUANTITIES, WE NOW GET NF,
C     PS,AND PETA
C     INORDER TO SET FLAGS TO BE USED LATER, WE SUM THE F'S IN COLS,
C     TO RIGHT AND LEFT AND IN ROWS ABOVE AND BELOW THE (I,J) CELL
C     SFIM = SUM OF F'S IN (I-1) COL.
C     SFIP = SUM OF F'S IN (I+1) COL.
C     SFJP = SUM OF F'S IN (J+1) ROW
C     SFJM = SUM OF F'S IN (J-1) ROW
C     SFIC = SUM OF F'S IN I COL.
C     SFJC = SUM OF F'S IN J ROW
C
      SFIM=F(I-1,J+1)+F(I-1,J)+F(I-1,J-1)
	SFIC=F(I,J+1)+F(I,J)+F(I,J-1)
	SFIP=F(I+1,J+1)+F(I+1,J)+F(I+1,J-1)
      SFJP=F(I+1,J+1)+F(I,J+1)+F(I-1,J+1)
	SFJC=F(I+1,J)+F(I,J)+F(I-1,J)
	SFJM=F(I+1,J-1)+F(I,J-1)+F(I-1,J-1)
C
C     IF THERE IS LITTLE FLUID IN THREE BY THREE ARRAY OF CELLS: SET
C     CELL PRESSURE AS FOR AN ISOLATED CELL AND GO TO END OF MAIN LOOP
C     FLAGS ARE INITIALLY SET = O
C
      IF(SFIM+SFIC+SFIP+SFJM+SFJC+SFJP.LT.0.10) GO TO 655
C
C     IF ANY CELL FACE IS COMPLETELY CLOSED TO FLOW: SKIP ROW AND
C     COLUMN TESTS
C
      IF(AR(I,J).LT.EM6.OR.AR(I-1,J).LT.EM6.OR.AT(I,J).LT.EM6.
     1OR.AT(I,J-1).LT.EM6) GO TO 670
	IFLGX=0
	JFLGY=0
C
C     IF EITHER COL.TO LEFT OR COL.TO RIGHT IS EMPTY OR IS FULL: IFLG-
C     X = 1
C
      IF (SFIM.LT.EMF.OR.SFIM.GT.3.0-EMF) IFLGX=1
      IF (SFIP.LT.EMF.OR.SFIP.GT.3.0-EMF) IFLGX=1
C
C     IF EITHER ROW ABOVE OR ROW BELOW IS EMPTY OR IS FULL: JFLGY = 1
C
      IF (SFJP.LT.EMF.OR.SFJP.GT.3.0-EMF) JFLGY=1
	IF (SFJM.LT.EMF.OR.SFJM.GT.3.0-EMF) JFLGY=1
C
C     IF BOTH FLAGS = 1: CONTINUE EXECUTION AT 670 WITHOUT INTERVENTION
C
      IF (IFLGX.EQ.1.AND.JFLGY.EQ.1) GO TO 670
C
C     IF EXACTLY ONE FLAG =1: CHANGE THE CORRESPONDING SLOPE
C
      IF (IFLGX.EQ.1) PFX=1.0E10*PFX
      IF (JFLGY.EQ.1) PFY=1.0E10*PFY
  670 CONTINUE
C
C     WE HAVE CONCLUDED SLOPE INCREASES
C
C
C     *** DETERMINE THE PRESURE INTERPOLATION CELL NF
C
C     ALGORITHM GUARANTEES THAT A NEIGHBORING FLUID CELL (ONE OR MORE
C     ALWAYS EXIST) ALWAYS LIES AT FLOOR OF THE SURFACE CELL. THE FLUID
C     CELL AT THE FLOOR IS USED AS THE INTERPOLATION NEIGHBOR CELL IN
C     PRESIT OR PRESCR
C
C     GET ABSOLUTE VALUE OF SLOPES; MINIMUM WILL DETERMINE WHETHER
C     SURFACE HAS NEAR HORIZONTAL OR NEAR VERTICAL ORIENTATION
C
      ABPFX=ABS(PFX)
	ABPFY=ABS(PFY)
C
C     SET DEFAULT VALUES OF THE INDICES OF THE INTERPOLATION NEIGHBOR
C     CELL (L,M): (L,M) * (I,J)
C
      L=I
	M=J
C
C     IF SURFACE IS MORE NEARLY HORIZONTAL: GO TO 680. OTHERWISE
C     SURFACE IS MORE NEARLY VERTICAL AND WE ASSIGN NF = 2 DR 1
C
      IF (ABPFY.GE.ABPFX) GO TO 680
C
C     SETNIMUM SLOPE,L INDEX, AND NF CONSISTENTLY WITH NF = 2
C
      PFMN=PFY
	NF(I,J)=2
	L=I+1
C
C     COMPUTE LENGTH INTERVALS NEEDED FOR EVALUATING THE PRESSURE
C     INTERPOLATION (INTERVALS NEEDED IN BUILDING THE PETA ARRAY)
C
      DMX=DELX(I)
	DMIN=0.5*(DMX+DELX(I+1))
	DNBR=DELX(I+1)
C
C     ALGEBRAIC SIGN OF LARGER ABSOLUTE SLOPE (PFX) DETERMINES NF VALUE.
C     IF PFX > 0.0 THEN NF = 2 AND WE SKIP TO END OF NF ROUTINE AT 690
C
C     OTHERWISE NF = 1 AND WE GD ON, REPEATING IMMEDIATELY PREVIOUS
C     STEPS APPROPRIATELY FOR NF = 1
C
      IF (PFX.GT.0.0) GO TO 690
	NF(I,J)=1
	PFMN=-PFY
	L=I-1
	DMX=DELX(I)
	DMIN=0.5*(DMX+DELX(I-1))
	DNBR=DELX(I-1)
C
C     HAVING COMPLETED CALCULATIONS FOR NF = 1, WE SKIP TO END OF NF
C     ROUTINE HOLDING NF = 1 DATA
C
      GO TO 690
  680 CONTINUE
C
C     WE ARE NOW IN SURFACE MORE NEARLY HORIZONTAL CASE. WE START WITH
C     NF = 4
C     SET MINIMUM SLOPE, L INDEX AND NF CONSISTENTLY WITH NF = 4
C
      PFMN=-PFX
	NF(I,J)=4
	M=J+1
	DMX=DELY(J)
	DMIN=0.5*(DMX+DELY(J+1))
	DNBR=DELY(J+1)
C
C     ALGEBRAIC SIGN OF LARGER SLOPE (PFY) DETERMINES NF VALUE. IF PFY
C     >0.0 THEN NF = 4 AND WE SKIP TO END OF NF ROUTINE
C     OTHERWISE NF = 3 AND WE GO ON, REPEATING IMMEDIATELY PREVIOUS
C     STEPS APPROPRIATELY FOR NF = 3
C
      IF (PFY.GT.0.0) GO TO 690
	NF(I,J)=3
	PFMN=PFX
	M=J-1
	DMX=DELY(J)
	DMIN=0.5*(DMX+DELY(J-1))
	DNBR=DELY(J-1)
  690 CONTINUE
C
C     WE HAVE COMPLETED SETTING NF AND (L,M) FOR THE PRESSURE INTERPO-
C     LATION
C
C
C     DETERMINE AN INTERPOLATION LENGTH FOR THE PETE ARRAY
C
      IF(NF(I,J).EQ.1) SDFS=(1.0+AC(I-1,J)*(F(I-1,J)-1.0))*DELX(I-1)+
     1 (1.0+AC(I,J)*(F(I,J)-1.0))*DELX(I)
	IF(NF(I,J).EQ.2) SDFS=(1.0+AC(I+1,J)*(F(I+1,J)-1.0))*DELX(I+1)+
     1 (1.0+AC(I,J)*(F(I,J)-1.0))*DELX(I)
      IF(NF(I,J).EQ.3) SDFS=(1.0+AC(I,J-1)*(F(I,J-1)-1.0))*DELY(J-1)+
     1 (1.0+AC(I,J)*(F(I,J)-1.0))*DELY(J)
      IF(NF(I,J).EQ.4) SDFS=(1.0+AC(I,J+1)*(F(I,J+1)-1.0))*DELY(J+1)+
     1 (1.0+AC(I,J)*(F(I,J)-1.0))*DELY(J)
	DFS=0.5*DMX+DNBR-SDFS
	DFS=AMIN1(DFS,0.5*DMIN)
C
C     IF NO SURFACE TENSION BYPASS PS ROUTINE AND CALCULATE PETA (I,J)
C
      IF (ISURF10.LT.1) GO TO 740
C
C      *** DETERMINE THE SURFACE PRESSURE
C
C     WE DETERMINE ONLY THE SURFACE TENSION CONTRIBUTION TO PS; VOID
C     PRESSURE IS ADDED IN PRESIT OR IN PRESCR
C
C     SET NF AND NW INTO NON-INDEXED VARIABLES FOR USE IN IF STATEMENTS
C     SET DEFAULT VALUES OF FLGE,...,AFE,...,FLGU,INW,CSANG,AND SANG
C     FLAGS GIVE CHOICE OF WALL ADHESION OR SURFACE TENSION AND, IF WALL
C     ADHESION, THE DIRECTION OF THE FORCE
C
      NFF=NF(I,J)
	FLGE=1.0
	FLGW=1.0
	FLGN=1.0
	FLGS=1.0
	NWW=NW(I,J)
	CSANG=COSO(I,J)
	SANG=SINO(I,J)
	FLGU=1.0
	AFE=1.0
	AFW=1.0
	AFN=1.0
      AFS=1.0
	INW=0
C
C     NWW=0 INDICATES A FLUID CELL FULLY OPEN TO FLOW WHOSE FACES
C     MAY BE COMPLETELY OPEN TO FLOW, FULLY CLOSED, OR PARTIALLY
C     OPEN TO FLOW (SIMULATING POROUS BAFFLES) - SKIP TO STANDARD
C     SURFACE TENSION CALCULATION
C
      IF(NWW.EQ.0) GO TO 100
C
C     RESET INW; THIS FORECLOSES THE POROUS BAFFLE OPTION
C     (CELL FACES PARTIALLY OPEN TO FLOW, PART SURFACE TENSION,
C     PART ADHESION)
C     RESET CSANG FOR NF=1 OR 2; WE NOW HAVE FINAL VALUES FOR CSANG
C     SO MAGNITUDE OF WALL ADHESION FORCE HAS NOW BEEN DETERMINED
C     IF NWW=NFF GO TO STANDARD CALCULATION OF SURFACE TENSION
C     USING PARAMETERS SET FOR CURVED BOUNDARY CASES
C
      INW=1
	IF(NFF.LE.2) CSANG=SINO(I,J)
	SANG=0.0
	IF(NWW.EQ.NFF) GO TO 100
C
C     CURVED BOUNDARY WALL ADHESION
C
C     FOR SOME CASES OF NW = 1,3,4,5,6,7, OR 8 SET WALL ADHESION RATHER
C     THAN SURFACE TENSION. CHOOSING THE WALL AND THE FORCE DIRECTION
C     USE NF AND NEIGHBORING F VALUES TO MAKE THE DETERMINATION
C
      GO TO (20,100,30,40,50,60,70,80),NWW
C
C     WE ARE IN NW = 1 BRANCH. WE HAVE ALREADY TREATED NF = 1. FOR NF = 
C     3 OR 4 : BRANCH AHEAD TO 23 OR 24
C     FOR NF = 2: RESET FLGU; IF FLUID ABOVE, PUT WALL ADHESION ON
C     TOP WALL; IF NO FLUID BELOW. PUT WALL ADHESION ON BOTTOM WALL
C     ENTER NEXT STAGE OF CALCULATION
C
   20 IF(NFF.EQ.3) GO TO 23
      IF(NFF.EQ.4) GO TO 24
	FLGU=-1.0
	IF(F(I,J+1).LE.EMF) AFN=0.0
	IF(F(I,J-1).LE.EMF) AFS=0.0
	GO TO 100
C
C     FOR NF = 3: IF NO FLUID ABOVE, PUT WALL ADHESION ON EAST WALL; IF
C     NO FLUID BELOW, PUT WALL ADHESION ON WEST WALL
C     ENTER NEXT SAGE OF CALCULATION
C
   23 IF(F(I,J+1).LE.EMF) AFE=0.0
      IF(F(I,J-1).LE.EMF) AFW=0.0
      GO TO 100
C
C     FOR NF = 4: IN THIS CASE WE ARE CALCULATING - Y COMPONENT OF
C     SURFACE FORCES. THUS WALL ADHESION ENTERS WITH OPPOSITE SIGN. IF
C     NO FLUID ABOVE, PUT WALL ADHESION ON WEST WALL; IF NO FLUID
C     BELOW, PUT WALL ADHESION ON EAST WALL
C     ENTER NEXT STAGE OF CALCULATION 
   24 IF(F(I,J+1).LE.EMF) AFW=0.0
      IF(F(I,J-1).LE.EMF) AFE=0.0
	GO TO 100
C
C     WE ARE IN NW=4 BRANCH. WE HAVE ALREADY TREATED NF=1
C     FOR NF=1 OR 2; BRANCH AHEAD TO 41 OR 42
C     FOR NF=3: IF NO FLUID TO RIGHT, PUT ADHESION ON EAST WALL:
C     IF NO FLUID TO LEFT, PUT ADHESION ON WEST WALL
C     ENTER NEXT STAGE...
C
   40 GO TO (41,42,43,43), NFF
   43 IF(F(I+1,J).LE.EMF) AFE=0.0
      IF(F(I-1,J).LE.EMF) AFW=0.0
	GO TO 100
C
C     FOR NF=1: RESET FLGU; IF ND FLUID TO RIGHT, PUT ADHESION
C     ON SOUTH WALL; IF NO FLUID TO LEFT, PUT ADHESION ON NORTH WALL
C     ENTER NEXT STAGE...
C
   41 FLGU=-1.0
      IF(F(I+1,J).LE.EMF) AFS=0.0
	IF(F(I-1,J).LE.EMF) AFN=0.0 
	GO TO 100
C
C     FOR NF=2: RESET FLGU; IF NO FLUID TO RIGHT PUT ADHESION ON
C     NORTH WALL; IF NO FLUID TO LEFT, PUT ADHESION ON SOUTH WALL
C     ENTER NEXT STAGE...
C
   42 IF(F(I-1,J).LE.EMF) AFS=0.0
      IF(F(I+1,J).LE.EMF) AFN=0.0 
	FLGU=-1.0
	GO TO 100
C
C     WE ARE NOW IN NW=3 BRANCH. WE HAVE ALREADY TREATED NF=3
C     FOR NF=1 OR 2: BRANCH AHEAD TO 31 OR 32
C     FOR NF=4: RESET FLGU, IF NO FLUID TO RIGHT, PUT ADHESION
C     ON EAST WALL; IF NO FLUID TO LEFT. PUT ADHESION ON WEST WALL
C     ENTER NEXT STAGE...
C
   30 GO TO (31,32,33,33),NFF
   33 IF(F(I+1,J).LE.EMF) AFE=0.0
      IF(F(I-1,J).LE.EMF) AFW=0.0
	FLGU=-1.0
	GO TO 100
C
C     IF NO FLUID TO RIGHT, PUT ADHESION ON NORTH WALL; IF NO FLUID
C     TO LEFT, PUT ADHESION ON SOUTH WALL
C     ENTER NEXT STAGE...
C
   31 IF(F(I+1,J).LE.EMF) AFN=0.0
      IF(F(I-1,J).LE.EMF) AFS=0.0
	GO TO 100
C
C     IF NO FLUID TO RIGHT, PUT ADHESION ON SOUTH WALL; IF NO FLUID
C     TO LEFT, PUT ADHESION ON NORTH WALL
C     ENTER NEXT STAGE...
C
   32 IF(F(I-1,J).LE.EMF) AFN=0.0
      IF(F(I+1,J).LE.EMF) AFS=0.0
	GO TO 100
C
C     WE ARE NOW IN NW=6 BRANCH
C     RESET FLGU; IF NF=2 OR 4
C     BRANCH ANEAD TO 64; IF NF=3 OR 4
C     FOR NF=1 OR 2: IF NO FLUID ABOVE, PUT ADHESION ON NORTH WALL;
C     IF NO FLUID TO LEFT, PUT ADHESION ON SOUTH WALL
C     ENTER NEXT STAGE...
C
   60 IF(NFF.EQ.2.OR.NFF.EQ.4) FLGU=-1.0
      IF(NFF.GT.2) GO TO 64
      IF(F(I,J+1).LT.EMF) AFN=0.0
      IF(F(I-1,J).LT.EMF) AFS=0.0
	GO TO 100
C
C     FOR NF=3 OR 4: IF NO FLUID ABOVE, PUT ADHESION ON EAST WALL;
C     IF NO FLUID TO THE LEFT, PUT ADHESION ON WEST WALL
C     ENTER NEXT STAGE...
C
   64 IF(F(I,J+1).LT.EMF) AFE=0.0
      IF(F(I-1,J).LT.EMF) AFW=0.0
	GO TO 100
C
C     WE ARE NOW IN NW=5 BRANCH
C     FOR NF=1 OR 4: RESET FLGU
C     FOR NF=3 OR 4: BRANCH AHEAD TO 54
C     FOR NF=1 OR 2: IF NO FLUID BELOW, PUT ADHESION ON SOUTH WALL;
C     IF NO FLUID TO THE LEFT, PUT ADHESION ON NORTH WALL
C     ENTER NEXT STAGE...
C
   50 IF(NFF.EQ.1.OR.NFF.EQ.4) FLGU=-1.0
      IF(NFF.GT.2) GO TO 54
	IF(F(I,J-1).LT.EMF) AFS=0.0
      IF(F(I-1,J).LT.EMF) AFN=0.0
	GO TO 100 
C
C     FOR NF=3 OR 4: IF NO FLUID BELOW, PUT ADHESION ON EAST WALL;
C     IF NO FLUID TO THE LEFT, PUT ADNESION ON WEST WALL
C     ENTER NEXT STAGE...
C
   54 IF(F(I,J-1).LT.EMF) AFE=0.0
      IF(F(I-1,J).LT.EMF) AFW=0.0
	GO TO 100
C
C     WE ARE IN NW=7 BRANCH
C     FOR NF=1 DR 3: USE SURFACE TENSION ONLY
C     FOR NF=4: BRANCH AHEAD TO 74
C     FOR NF=2: IF NO FLUID ABOVE, PUT ADHESION ON NORTH WALL
C     ENTER NEXT STAGE...
C
   70 GO TO (100,72,100,74), NFF
   72 IF(F(I,J+1).LT.EMF) AFN=0.0
      GO TO 100
C
C     FOR NF=4: RESET FLGU; IF NO FLUID TO RIGHT, PUT ADHESION ON EAST
C     WALL
C     ENTER NEXT STAGE...
C
   74 IF(F(I+1,J).LT.EMF) AFE=0.0
      FLGU=-1.0
	GO TO 100
C
C     WE ARE IN NW=8 BRANCH
C     FOR NF=1 OR4: USE SURFACE TENSION ONLY
C     FOR NF=3; BRANCH AHEAD TO 93
C     FOR NF=2; RESET FLGU; IF NO FLUID BELOW, PUT ADHESION ON SOUTH
C     WALL
C     ENTER NEXT STAGE...
C
   80 GO TO (100,82,83,100), NFF
   82 IF(F(I,J-1).LT.EMF) AFS=0.0
      FLGU=-1.0
      GO TO 100
C
C     FOR NF=3; IF ND FLUID TO THE RIGHT, PUT ADHESION ON EAST WALL
C
   83 IF(F(I+1,J).LT.EMF) AFE=0.0
C
C     CALCULATION OF SURFACE TENSION FORCE IS DIFFERENT FOR VERTICAL
C     AND HORIZONTAL SURFACES; GO TO APPROPIATE BRANCH TO BEGIN
C
  100 GO TO (700,700,710,710), NFF
C
C     WE HAVE A NEAR VERTICAL SURFACE
C     CALCULATE A HORIZONTAL DISTANCE (RDEW)  AND A RECIPROCAL Y
C     INTERVAL (RDNS) FOR LATER USE
C
  700 RDEW=RXI(I)
C
C     IF(INW=0; GO TO CALCULATION POROUS BAFFLE CAPABILITY; CALCULAT
C     LINEAR COMBINATION OF SURFACE TENSION AND ADHESION FORCES
C     DTHERWISE, BURASS POROUS BAFFLE ROUTINE AND CALCULATE EITHER
C     SURFACE TENSION OR WALL ADHESION
C     
      IF(INW.EQ.0) GO TO 701
	RDNS=RDY(J)
	IF(I.EQ.2) GO TO 702
	IF(AR(I-1,J).GT.EM6) RDNS=RDY(J)/AR(I-1,J)
	GO TO 702
  701 FLGU=-1.0
      RDNS=RDY(J)
C
C     SET FRACTIONAL AREA OPEN TO FLOW ON EAST, OR RIGHT, CELL WALL
C     AND ON WEST, OR LEFT, WALL (I.E.,AFE AND AFW) BY CONVENTION
C
      AFE=1.0
	AFW=1.0
C
C     SET FRACTIONAL AREA OPEN TO FLOW ON NORTH,OR TOP, WALL AND ON
C     SOUTH, OR BOTTOM, WALL ACCORDING TO OBSTACLE GEOMETRY
C
      AFN=AT(I,J)
	AFS=AT(I,J-1)
C
C     SET DEFAULT VALUE OF AFLOOR, FOR LATER USE IN WALL ADHESION FORCE
C
      AFDOR=0.0
C
C     SET AFLOOR FOR NF = 1: EXCEPT FOR FIRST COL. DF CELLS AFLOOR =
C     FRACTIONAL AREA OPEN TO FLOW ON EAST CELL WALL
C
C     FOR NF = 2 AFLOOR = FRACTIONAL AREA OPEN TO FLOW ON WEST WALL
C
      IF (X(I-1).GT.EM6) AFLOOR=AR(I-1,J)
	IF (NFF.EQ.2) AFLOOR=AR(I,J)
C
C     IF TOP OR BOTTOM CELL WALL IS OPEN TO FLOW BUT CELL IS EMPTY, SET
C     CORRESPONDING FLAG TO AFLOOR VALUE
C
      IF (AFN.GT.EM6.AND.F(I,J+1).LT.EMF) FLGN=AFLOOR
      IF (AFN.GT.EM6.AND.F(I,J-1).LT.EMF) FLGS=AFLOOR
C
C     BEGIN CALCULATION OF.SURFACE TENSION FORCES, ESPECIALLY OF THE
C     TANGENTS THAT APPEAR ON THE VARIOUS WALLS
C
  702 DHENE=0.0
      DHESE=0.0
	DHENW=0.0
	DHESW=0.0
	DHNNE=(AVFT-AVFCY)*2.0/(DELY(J)+DELY(J+1))
	DHNNW=DHNNE
	DHNSE=(AVFCY-AVFB)*2.0/(DELY(J)+DELY(J-1))
	DHNSW=DHNSE
C
C     IF PLANE GEOMETRY; SKIP TO 720, WHERE CALCULATION OF SURFACE
C     TENSION FORCES PROCEEDS
C
      IF(CYL.LT.0.5) GO TO 720
C
C     FOR CYLINDRICAL CASE WE CALCULATE EXTRA TERM DUE TO AZIMUTHAL
C     CURVATURE OF SURFACE; CALCULATE AN AVERAGE SLOPE, MULTIPLY BY SOME
C     GEOMETRIC FACTORS, SWITCH ALGEBRAIC SIGN WHEN NF =2 (AS
C     SURFACE CURVATURE CHANGES SIGN), AND STORE RESULT IN FLGN AND FLGS
C
      DHNA=0.5*(DHNNE+DHNSE)
	FCYL=0.5*DELY(J)*DHNA*RXI(I)
	IF(NFF.EQ.2) FCYL=-FCYL
	FLGN=FLGN*(1.0+FCYL)
      FLGS=FLGS*(1.0-FCYL)
C
C     HAVING STORED CYLINDRICAL INFORMATION; PROCEED TO FURTHER
C     CALCULATION OF SURFACE TENSION FORCE AT 720
C
      GO TO 720
C
C     WE HAVE A NEAR HORIZONTAL  SURFACE; CALCULATE RDEW AND RDNS
C     APPROPIATE TO THIS CASE
C
  710 RDNS=RXI(I)
C
C     IF INW=0 GO TO POROUS BAFFLE ROUTINE, GIVING LINEAR
C     COMBINATION OF SURFACE TENSION AND ADHESION FORCES
C     OTHERWISE, BYPASS POROUS BAFFLE ROUTINE, CALCULATING EITHER
C     SURFACE TENSION OR ADHESION, EITHER HERE OR AFTER 713
C
      IF(INW.EQ.0) GO TO 711
	RDEW=RDX(I)
	IF(NW(I,J).EQ.3.OR.NW(I,J).EQ.5.OR.NW(I,J).EQ.7) GO TO 713
	IF(AT(I,J).GT.EM6) RDEW=RDX(I)/AT(I,J)
	GO TO 712
  713 IF(AT(I,J-1).GT.EM6) RDEW=RDX(I)/AT(I,J-1)
      GO TO 712
  711 FLGU=-1.0
      RDEW=RDX(I)
C
C     SET FOUR FRACTIONAL AREAS OPEN TO FLOW APPROPIATELY
C
      AFE=AR(I,J)
	AFW=0.0
	IF (X(I-1).GT.EM6) AFW=AR(I-1,J)
	AFN=1.0
	AFS=1.0
C
C     SET AFLOOR FOR LATER USE: TOP OR BOTTOM AREA OPEN TO FLOW
C
      AFLOOR=AT(I,J-1)
	IF (NFF.EQ.4) AFLOOR=AT(I,J)
C
C     IF LEFT OR RIGHT CELL IS OPEN TO FLOW BUT EMPTY, SET
C     CORRESPONDING FLAG TO AFLOOR VALUE
C
      IF(AFE.GT.EM6.AND.F(I+1,J).LT.EMF) FLGE=AFLOOR
      IF(AFW.GT.EM6.AND.F(I-1,J).LT.EMF) FLGW=AFLOOR
  712 IF(CYL.GT.0.5) FLGE=FLGE*X(I)*RXI(I)
      IF(CYL.GT.0.5) FLGW=FLGW*X(I)*RXI(I)
C
C     LDAD THE SURFACE TANGENTS IN THE SAME EIGHT VARIABLES:
C     ACCUMULATING IN MANNER APPROPIATE TO HORIZONTAL CASE
C
      DHNNE=0.0
	DHNSE=0.0
	DHNNW=0.0
	DHNSW=0.0
	DHENE=(AVFR-AVFCX)*2.0/(DELX(I)+DELX(I+1))
	DHESE=DHENE
	DHENW=(AVFCX-AVFL)*2.0/(DELX(I)+DELX(I-1))
	DHESW=DHENW
C
C     WE HAVE COLLECTED SURFACE TANGENTS AND GO ON TO FURTHER
C     EVALUATION OF SURFACE TENSION AND WALL ADHESION AT 720
C     ALL PATHS THRU THIS ROUTINE MEET AT 720 AND GO ON TO
C     WE CONSOLIDATE VARIABLES FOR GIVING SURFACE TANGENTS
C
  720 DHEE=0.5*(DHENE+DHESE)
      DHNE=0.5*(DHNNE+DHNSE)
	DHEW=0.5*(DHENW+DHESW)
	DHNW=0.5*(DHNNW+DHNSW)
C
C     BEGIN TO ASSEMBLE TO ASSEMBLE TERMS THAT WILL PROVIDE DENOMINATORS IN
C     EXPRESSIONS FOR SIGN OF ANGLE SURFACE MAKES WITH APPROPIATE
C     AXIS; DIRECTLY NEEDED FOR SURFACE TENSION FORCE
C
      TERM1=1.0+DHNE*DHNE
      TERM2=1.0+DHNW*DHNW
C
C     NOW CONSTRUCT THE DENOMINATOR
C
      RHDE=SQRT(TERM1+DHEE*DHEE)
	RHDW=SQRT(TERM2+DHEW*DHEW)
C
C     CALCULATE SURFACE FORCES ON EAST AND WEST WALLS
C     FORCE IS FY FOR NF=3 AND -FY FOR NF=4
C     ONLY FOR INW=0 IS FORCE REALLY A LINEAR COMBINATION OF
C     SURFACE TENSION AND WALL ADHESION FORCES. OTHERWISE,IT IS
C     EITHER SURFACE TENSION OR WALL ADHESION; ACCORDING TO RULES
C     GIVEN EARLIER
C
      FEW=FLGE*(AFE*DHEE/RHDE+FLGU*(1.0-AFE)*CSANG)-
     1FLGW*(AFW*DHEW/RHDW+FLGU*(1.0-AFW)*CSANG)
	IF (CYL.LT.0.5.OR.NFF.GT.2) GO TO 730
C
C     IN CYLINDRICAL CASE ADD A TERM TO FEW WHEN NF = 1 OR NF = 2
C     (HELPS BUILD AZIMUTHAL CURVATURE FORCE. SO ALLOW FOR CHANGE
C     OF SIGN OF CURVATURE BETWEEN NF = 1 AND NF = 2)
C
      FEW=-0.5*(TERM1/RHDE+TERM2/RHDW)
	IF (NFF.EQ.2) FEW=-FEW
C
C     ASSEMBLE TERMS TO CONSTRUCT SINES OF ANGLES SURFACE MAKES WITH
C     NORTH AND SOUTH CELL WALLS
C
  730 DHEN=0.5*(DHENE+DHENW)
      DHNN=0.5*(DHNNE+DHNNW)
	DHES=0.5*(DHESE+DHESW)
      DHNS=0.5*(DHNSE+DHNSW)
	TERM1=1.0+DHEN*DHEN
      TERM2=1.0+DHES*DHES
	RHDN=SQRT(TERM1+DHNN*DHNN)
      RHDS=SQRT(TERM2+DHNS*DHNS)
C
C     CALCULATE SURFACE FORCES ON NORTH AND SOUTH WALLS
C     FORCE IS FX FOR NF=1 AND -FX FOR NF=2
C     ONLY FOR INW=0 IS FORCE REALLY A LINEAR COMBUNATIONOF SURFACE
C     TENSION AND WALL ADHESION FORCES. OTHERWISE, IT IS EITHER
C     SURFACE TENSION OR WALL ADHESION; ACCORDING TO RULES GIVEN EARLIER
C
      FNS=FLGN*(AFN*DHNN/RHDN+FLGU*(1.0-AFN)*CSANG)-
     1FLGS*(AFS*DHNS/RHDS+FLGU*(1.0-AFS*CSANG))
C
C     FOR THE POROUS BAFFLE OPTION (INW=0); COMPUTE ADDITIONAL SURFACE
C     FORCES, ALLOWING FOR SOME CASES OF WALL ADHESION WHICH THE
C     PRECEDING ALGORITHMS MISS WHEN INW=0
C
      FEW=FEW-(2.0-FLGE-FLGW)*SANG
	FNS=FNS-(2.0-FLGN-FLGS)*SANG
	AFEW=ABS(FEW)
C
C     LIMIT SIZE OF FEW AND FNS WHEN ALGOTITHMS GIVE UNPHYSICAL RESULTS
C     AND MULTIPLY BY GEOMETRIC FACTORS NEEDED FOR PS
C
      IF(NFF.LE.2) FEW=AMIN1(RDEW*AFEW,RX(2),FEWLIM)*SIGN(1.0,FEW)
      IF(NFF.GT.2) FEW=AMIN1(RDEW*AFEW,RDEW,FEWLIM)*SIGN(1.0,FEW)
	AFNS=ABS(FNS)
	FNS=AMIN1(RDNS*AFNS,RDNS,FNSLIM)*SIGN(1.0,FNS)
C
C     COMPUTE SURFACE TENSION PRESSURE AND CALL IT THE SURFACE PRESSURE
C     (PS). ANY VOID PRESSURE CONTRIBUTION TO PS IS ADDED IN PRESSURE
C     UPDATE ROUTINE
C
      PS(I,J)=-SIGMA*(FEW+FNS)
C
  740 CONTINUE
C
C     *** CALCULATE PETA
C
      NFSB=0
	IF (F(I+1,J).LT.EMF.OR.AR(I,J).LT.EM6) NFSB=NFSB+1
      IF (F(I,J+1).LT.EMF.OR.AT(I,J).LT.EM6) NFSB=NFSB+2
	IF (F(I-1,J).LT.EMF.OR.AR(I-1,J).LT.EM6) NFSB=NFSB+4
	IF (F(I,J-1).LT.EMF.OR.AT(I,J-1).LT.EM6) NFSB=NFSB+8
	IF (NFSB.EQ.15) PS(I,J)=0.0
	PETA(I,J)=1.0/(1.0-DFS/DMIN)
	IF (L.EQ.1.OR.L.EQ.IMAX) PETA(I,J)=1.0
      IF (M.EQ.1.OR.M.EQ.JMAX) PETA(I,J)=1.0
	IF (NF(L,M).NE.0) PETA(I,J)=1.0
	IF (NF(I,J).EQ.1.AND.AR(I-1,J).GT.EM6) GO TO 750
      IF (NF(I,J).EQ.2.AND.AR(I,J).GT.EM6) GO TO 750
	IF (NF(I,J).EQ.3.AND.AT(I,J-1).GT.EM6) GO TO 750
	IF (NF(I,J).EQ.4.AND.AT(I,J).GT.EM6) GO TO 750
	PETA(I,J)=1.0
  750 CONTINUE
C
      CALL LAVORE
C
      CALL CAVOVO
C
C     IF NECESSARY, DETERMINE PRESSURES PR FOR VOID REGIONS NF
C
C     *** SET PETA IN ADJACENT FULL CELL
C
      DO 830 J=1,JMAX
	DO 820 I=1,IMAX
	NFF=NF(I,J)
	IF (NFF.EQ.0.OR.BETA(I,J).LT.0.0) GO TO 820
	IF (NFF.LE.5) GO TO 760
	P(I,J)=PR(NFF)
	GO TO 820
  760 L=I
      M=J
	GO TO (770,780,790,800,820), NFF
  770 L=I-1
      DMX=DELX(L)
	DMIN=0.5*(DMX+DELX(I))
	AMN=AR(L,J)*R(L)
	GO TO 810
  780 L=I+1
      DMX=DELX(L)
	DMIN=0.5*(DMX+DELX(I))
	AMN=AR(I,J)*R(I)
	GO TO 810
  790 M=J-1
      DMX=DELY(M)
	DMIN=0.5*(DMX+DELY(J))
	AMN=AT(I,M)*RI(I)
	GO TO 810
  800 M=J+1
      DMX=DELY(M)
	DMIN=0.5*(DMX+DELY(J))
	AMN=AT(I,J)*RI(I)
  810 CONTINUE
      IF (NF(L,M).GT.0.OR.AMN.LT.EM6) GO TO 820
	BPD=1.0/PETA(L,M)-BETA(L,M)*(1.0-PETA(I,J))*AMN/
     1(AC(L,M)*RI(I))*DELT/(DMIN*DMX)/RHOF
	PETA(L,M)=AMIN1(1.0/BPD,1.98/OMG)
  820 CONTINUE
  830 CONTINUE
      RETURN
	END




	SUBROUTINE PLTPT (XONE,YONE,ICHAR,ISYM) 
	INCLUDE "PARAM.FI"
C
C     PLOT (DRAW) A POINT
C     PROVIDES A SYSTEM DEPENDANT CALL
C
      IC=0
	X1=XONE
	Y1=YONE
   10 XO1=(X1-XMIN)*SF+XSHFT
      YO1=(Y1-YMIN)*SF+YSHFT
	IX1=50.+920.0*XO1
      IY1=50.+920.0*(1.0-YO1)
c	CALL PLT (IX1,IY1,42)
	IF (ABS(X1).LE.EM6) GO TO 20
	IF (ISYMPLT.EQ.0.OR.ISYM.EQ.0) GO TO 20
	IC=IC+1
	IF (IC.GT.1) GO TO 20
	X1=-X1
	GO TO 10
   20 RETURN
      END



	SUBROUTINE PRESCR 
	INCLUDE "PARAM.FI"
C
      DIMENSION FF(IBAR2, JBAR2),AF(IBAR2, JBAR2),VLM(IBAR2,JBAR2),
     1AD(IBAR2,JBAR2),QQ(IBAR2,JBAR2),SSM(IBAR2,JBAR2),
	2RXR(IBAR2,JBAR2),RXL(IBAR2,JBAR2),D(IBAR2,JBAR2),
	3RYT(IBAR2,JBAR2),RYB(IBAR2,JBAR2),DP(IBAR2,JBAR2)
C
      DATA  ADEFM,BDEFM/100.0,0.10/
	DATA ITMAX,ITMIN,ITMOST/500, 5, 90/
	DATA KTRAN/1/
C
C     THIS SUBROUTINE MUST BE MODIFIED FOR BOUNDARY CONDITIONS
C     OTHER THAN NORMAL VELOCITY EQUAL TO ZERO
C
      GO TO (1,2),KTRAN
    1 KTRAN=2
C
      EPSIP=2.0*EPSI
	EPSIM=0.5*EPSI
C
      IF(NCYC.GT.1) GO TO 2
	DO 750 J=1,JMAX
	DO 750 I=1,IMAX
	IF(AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 740
	NFF=NF(I,J)
	IF(NFF.EQ.0) GO TO 750
      IF(NFF.GT.5) GO TO 730
	L=I
	M=J
	GO TO (723,724,725,726,728), NFF
  723 L=I-1
      GO TO 727
  724 L=I+1
      GO TO 727
  725 M=J-1
      GO TO 727
  726 M=J+1
  727 NFEL=NF(I-1,J)
      NFER=NF(I+1,J)
	NFEB=NF(I,J-1)
	NFET=NF(I,J+1)
	NFE=MAX0(NFEL,NFER,NFEB,NFET)
	PSURF=PS(I,J)+PR(NFE)
	PLM=P(L,M)
	IF (NF(L,M).NE.0.AND.BETA(I,J).GT.0.0) PLM=PSURF
	P(I,J)=(1.0-PETA(I,J))*PLM+PETA(I,J)*PSURF
	GO TO 745
  728 IF(PSAT.LE.0.0) GO TO 736
      IF(F(I,J).LT.EMF1) GO TO 733
	PMPS=0.0
	IF(PN(I,J).LT.PSAT) PMPS=P(I,J)-PSAT
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	DIJ=DIJ/(AC(I,J)*RI(I))-PMPS**2/DELT
	P(I,J)=PN(I,J)-DIJ*BETA(I,J)/(1.0-2.0*PMPS*BETA(I,J)/DELT)
	GO TO 745
  730 P(I,J)=PR(NFF)
      GO TO 745
  733 P(I,J)=PSAT
      GO TO 745
  736 P(I,J)=PN(I,J)
      GO TO 745
  740 P(I,J)=0.0
  745 PN(I,J)=P(I,J)
  750 CONTINUE
C
    2 CONTINUE
C
      DELTCR=DELT/RHOF
	C1=1.0
	DD=1.0
	LVEC=IMAX*JMAX
	DO 150 J=1,JMAX
      DO 150 I=1,IMAX
	IF(NF(I,J).GT.0.OR.AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 140
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	VLM(I,J)=AC(I,J)*TPI*RI(I)*DELX(I)*DELY(J)
	D(I,J)=DIJ/(AC(I,J)*RI(I))*VLM(I,J)
C
      IF(IDEFM.EQ.0.OR.F(I,J).GE.EMF1) GO TO 5
C
      D(I,J)=D(I,J)+AMIN1(ADEFM*EPSI,BDEFM*(1.0-F(I,J))/DELT)
C
    5 CONTINUE
      SSM(I,J)=0.0
	RXR(I,J)=0.0
	RXRA=0.0
	RXRB=0.0
	IF(AR(I,J).LT.EM6) GO TO 10
	RXR(I,J)=AR(I,J)*TPI*R(I)*DELY(J)*2.0/(DELX(I)+DELX(I+1))
	SSM(I,J)=SSM(I,J)+DELTCR*RXR(I,J)
	IF(NF(I+1,J).EQ.0) GO TO 10
	IF(NF(I+1,J).GT.5) GO TO 9
      IF(NF(I+1,J).NE.1) GO TO 8
	RXRA=(1.0-PETA(I+1,J))*RXR(I,J)
      RXRB=((1.0-PETA(I+1,J))*PN(I,J)+PETA(I+1,J)*(PS(I+1,J)+PSAT)-
     1PN(I+1,J))*RXR(I,J)
	GO TO 9
    8 RXRB=(P(I+1,J)-PN(I+1,J))*RXR(I,J)
    9 RXR(I,J)=0.0
   10 RXL(I,J)=0.0
      RXLA=0.0
	RXLB=0.0
	IF(AR(I-1,J).LT.EM6) GO TO 20
	RXL(I,J)=AR(I-1,J)*TPI*R(I-1)*DELY(J)*2.0/(DELX(I)+DELX(I-1))
	SSM(I,J)=SSM(I,J)+DELTCR*RXL(I,J)
	IF(NF(I-1,J).EQ.0) GO TO 20
	IF(NF(I-1,J).GT.5) GO TO 19
	IF(NF(I-1,J).NE.2) GO TO 18
	RXLA=(1.0-PETA(I-1,J))*RXL(I,J)
	RXLB=((1.0-PETA(I-1,J))*PN(I,J)+PETA(I-1,J)*(PS(I-1,J)+PSAT)-
     1PN(I-1,J))*RXL(I,J)
	GO TO 19
   18 RXLB=(P(I-1,J)-PN(I-1,J))*RXL(I,J)
   19 RXL(I,J)=0.0
   20 RYT(I,J)=0.0
      RYTA=0.0
	RYTB=0.0
	IF(AT(I,J).LT.EM6) GO TO 30
	RYT(I,J)=AT(I,J)*TPI*RI(I)*DELX(I)*2.0/(DELY(J)+DELY(J+1))
	SSM(I,J)=SSM(I,J)+DELTCR*RYT(I,J)
	IF(NF(I,J+1).EQ.0) GO TO 30
      IF(NF(I,J+1).GT.5) GO TO 29
	IF(NF(I,J+1).NE.3) GO TO 28
	RYTA=(1.0-PETA(I,J+1))*RYT(I,J)
	RYTB=((1.0-PETA(I,J+1))*PN(I,J)+PETA(I,J+1)*(PS(I,J+1)+PSAT)-
     1PN(I,J+1))*RYT(I,J)
	GO TO 29
   28 RYTB=(P(I,J+1)-PN(I,J+1))*RYT(I,J)
   29 RYT(I,J)=0.0
   30 RYB(I,J)=0.0
      RYBA=0.0
	RYBB=0.0
	IF(AT(I,J-1).LT.EM6) GO TO 40
	RYB(I,J)=AT(I,J-1)*TPI*RI(I)*DELX(I)*2.0/(DELY(J)+DELY(J-1))
	SSM(I,J)=SSM(I,J)+DELTCR*RYB(I,J)
	IF(NF(I,J-1).EQ.0) GO TO 40
	IF(NF(I,J-1).GT.5) GO TO 39
      IF(NF(I,J-1).NE.4) GO TO 38
	RYBA=(1.0-PETA(I,J-1))*RYB(I,J)
	RYBB=((1.0-PETA(I,J-1))*PN(I,J)+PETA(I,J-1)*(PS(I,J-1)+PSAT)-
     1PN(I,J-1))*RYB(I,J)
	GO TO 39
   38 RYBB=(P(I,J-1)-PN(I,J-1))*RYB(I,J)
   39 RYB(I,J)=0.0
   40 SSM(I,J)=SSM(I,J)-DELTCR*(RXRA+RXLA+RYTA+RYBA)
      D(I,J)=(D(I,J)-DELTCR*(RXRB+RXLB+RYTB+RYBB))/SSM(I,J)
	FF(I,J)=0.0
	AF(I,J)=0.0
	QQ(I,J)=0.0
	AD(I,J)=0.0
	DP(I,J)=0.0
	GO TO 150
  140 VLM(I,J)=1.0
      D(I,J)=0.0
	FF(I,J)=0.0
	AF(I,J)=0.0
	AD(I,J)=0.0
	QQ(I,J)=0.0
	SSM(I,J)=1.0
	RXR(I,J)=0.0
	RXL(I,J)=0.0
	RYT(I,J)=0.0
	RYB(I,J)=0.0
	DP(I,J)=0.0
  150 CONTINUE
C
200   A=C1/DD
C      CALL SAXPY(LVEC,A,FF,1,DP,1)
C	CALL SAXPY(LVEC,-A,QQ,1,D,1)
	DMAX=0.0
	DO 350 J=1,JMAX
	DO 350 I=1,IMAX
	IF(NF(I,J).GT.0.OR.AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) D(I,J)=0.0
	DIV=D(I,J)*SSM(I,J)/VLM(I,J)*AC(I,J)*TPI*RI(I)
	DMAX=AMAX1(DMAX,ABS(DIV))
  350 CONTINUE
      IF(DMAX.LE.EPSI) GO TO 500
	DO 250 J=1, JMAX
	DO 250 I=1,IMAX
	IF(NF(I,J).GT.0.OR.AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 245
	AD(I,J)=DELTCR*(RXR(I,J)*D(I+1,J)+RXL(I,J)*D(I-1,J)+
     1RYT(I,J)*D(I,J+1)+RYB(I,J)*D(I,J-1))-SSM(I,J)*D(I,J)
	GO TO 250
  245 AD(I,J)=0.0
250   CONTINUE
C      C2=SDOT(LVEC,D,1,AD,1)
C	B=C2/C1
C	DD=0.0
C	CALL SSCAL(LVEC,B,FF,1)
C	CALL SAXPY(LVEC,1.,D,1,FF,1)
C	CALL SSCAL(LVEC,B,AF,1)
C	CALL SAXPY(LVEC,1.,AD,1,AF,1)
	DO 450 J=1,JMAX
	DO 450 I=1,IMAX
	QQ(I,J)=AF(I,J)/SSM(I,J)
  450 CONTINUE
C      DD=SDOT(LVEC,QQ,1,AF,1)
!	C1=C2
	ITER=ITER+1
	IF(ITER.GT.ITMAX) GO TO 230
	GO TO 200
  500 IF(ITER.GT.ITMOST) EPSI=1.05*EPSI
      IF(ITER.LT.ITMIN) EPSI=0.95*EPSI
	EPSI=AMIN1(EPSI,EPSIP)
	EPSI=AMAX1(EPSI,EPSIM)
C
C	UNFOLD PREESURE FOR INTERIOR FLUID CELLS
C
	DO 510 J=1,JMAX
	DO 510 I=1,IMAX
	IF(NF(I,J).GT.0.OR.AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 510
	P(I,J)=PN(I,J)+DP(I,J)
  510 CONTINUE
C
C	CALCULATE PRESSURE CHANGES FOR SURFACE CELLS
C	
	
	DO 550 J=1,JMAX
	DO 550 I=1,IMAX
	IF(AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 540
	NFF=NF(I,J)
	IF(NFF.EQ.0) GO TO 550
	IF(NFF.GT.5) GO TO 530
	L=I
	M=J
	GO TO (523,524,525,526,528),NFF
  523 L=I-1
	GO TO 527
  524 L=I+1
      GO TO 527
  525 M=J-1
	GO TO 527
  526 M=J+1
  527 NFEL=NF(I-1,J)
	NFER=NF(I+1,J)
	NFEB=NF(I,J-1)
	NFET=NF(I,J+1)
	NFE=MAX0(NFEL,NFER,NFEB,NFET)
	PSURF=PS(I,J)+PR(NFE)  !!!!! NFE=0
	PLM=P(L,M)
	IF(NF(L,M).NE.0.AND.BETA(I,J).GT.0.0) PLM=PSURF
	DP(I,J)=(1.0-PETA(I,J))*PLM+PETA(I,J)*PSURF-PN(I,J) 
	GO TO 550
  528 IF(PSAT.LE.0.0) GO TO 536
	IF(F(I,J).LT.EMF1) GO TO 533
	PMPS=0.0
	IF(PN(I,J).LT.PSAT) PMPS=P(I,J)-PSAT
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	DIJ=DIJ/(AC(I,J)*RI(I))-PMPS**2/DELT
	DP(I,J)=-DIJ*BETA(I,J)/(1.0-2.0*PMPS*BETA(I,J)/DELT)
	GO TO 550
  530 DP(I,J)=PR(NFF)-PN(I,J)
	GO TO 550
  533 DP(I,J)=PSAT-PN(I,J)
	GO TO 550
  536 DP(I,J)=0.0
	GO TO 550
  540 DP(I,J)=0.0
  550 CONTINUE
C
C	CALC NEW VELOCITIES CONSISTENT WITH SURFACE PRESSURE ASSUMPTIONS
C	NOTE: YIELDS D=0.0 FOR INTERIOR CELLS ADJACENT TO SURFACE CELLS
C
	DO 560 J=2,JM1
	DO 560 I=2,IM1
	IF(AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 560
	IF(AR(I,J).LT.EM6) GO TO 555
	IF(NF(I,J).EQ.0.AND.NF(I+1,J).EQ.0) GO TO 551
	IF(NF(I,J).EQ.0.AND.NF(I+1,J).NE.1) GO TO 552
	IF(NF(I,J).NE.2.AND.NF(I+1,J).EQ.0) GO TO 553
  551 U(I,J)=U(I,J)+DELTCR*(DP(I,J)-DP(I+1,J))*2.0/(DELX(I)+DELX(I+1))
	GO TO 555
  552 U(I,J)=U(I,J)+DELTCR*DP(I,J)*2.0/(DELX(I)+DELX(I+1))
      GO TO 555
  553 U(I,J)=U(I,J)+DELTCR*(-DP(I+1,J))*2./(DELX(I)+DELX(I+1))
      GO TO 555
555   IF(AT(I,J).LT.EM6) GO TO 560
      IF(NF(I,J).EQ.0.AND.NF(I,J+1).EQ.0) GO TO 556
      IF(NF(I,J).EQ.0.AND.NF(I,J+1).EQ.3) GO TO 557
	IF(NF(I,J).EQ.4.AND.NF(I,J+1).EQ.0) GO TO 558
  556 V(I,J)=V(I,J)+DELTCR*(DP(I,J)-DP(I,J+1))*2.0/(DELY(J)+DELY(J+1))
      GO TO 560
  557 V(I,J)=V(I,J)+DELTCR*DP(I,J)*2.0/(DELY(J)+DELY(J+1))
      GO TO 560
  558 V(I,J)=V(I,J)+DELTCR*(-DP(I,J+1))*2./(DELY(J)+DELY(J+1))
560   CONTINUE
C
C     PUT IN PRESSURES FOR SURFACE CELLS, ISOLATED CELLS, VOIDS
C
      DO 570 J=1,JMAX
	DO 570 I=1,IMAX
	IF(AC(I,J).LT.EMF.OR.BETA(I,J).LE.0.0) GO TO 570
	IF(NF(I,J).EQ.0) GO TO 570
	P(I,J)=PN(I,J)+DP(I,J)
  570 CONTINUE
C
      CALL BC
C
      RETURN
  230 CONTINUE
      WRITE (59,240) NCYC
      WRITE (12,240) NCYC
      WRITE (6,240) NCYC
c	CALL EXITLDC("PITER")
C
  240 FORMAT (1X,29HTOO MANY CR ITERATIONS, CYCLE,I7)
      END




	SUBROUTINE PRESIT
	INCLUDE "PARAM.FI"
      DATA ITMAX /1000/
C
C     PRESSURE ITERATION
C
C     TEST FOR CONVERGENCE
C
   10 IF (FLG.EQ.0) GO TO 160
      ITER=ITER+1
	IF (ITER.LT.ITMAX) GO TO 20
	FNOC=1.0
	NOCON=NOCON+1
	WRITE (12,170) NCYC,T,NOCON
      WRITE (59,170) NCYC,T,NOCON
	GO TO 160
   20 FLG=0.0
C
C     COMPUTE UPDATED CELL PRESSURE AND VELOCITIEC
C
      DO 150 J=JPB,JPT
	DO 150 I=IPL,IPR
	IF (BETA(I,J).LT.0.0) GO TO 150
	IF (NF(I,J).GT.5) GO TO 150
	IF (NF(I,J).EQ.0) GO TO 100
C
C     CALCULATE PRESSURE FOR SURFACE CELLS
C
      NFF=NF(I,J)
	L=I
	M=J
	GO TO (50,60,70,80,30), NFF
   30 IF (PSAT.LE.0.0) GO TO 150
      IF (F(I,J).LT.EMF1) GO TO 40
	PMPS=0.0
	IF (P(I,J).LT.PSAT) PMPS=P(I,J)-PSAT
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	DIJ=DIJ/(AC(I,J)*RI(I))-PMPS**2/DELT
	DELP=-DIJ*BETA(I,J)/(1.0-2.0*PMPS*BETA(I,J)/DELT)
	GO TO 110
   40 DELP=PSAT-P(I,J)
      GO TO 110
   50 L=I-1
      GO TO 90
   60 L=I+1
      GO TO 90
   70 M=J-1
      GO TO 90
   80 M=J+1
   90 CONTINUE
      NFEL=NF(I-1,J)
	NFER=NF(I+1,J)
	NFEB=NF(I,J-1)
	NFET=NF(I,J+1)
	NFE=MAX0(NFEL,NFER,NFEB,NFET)
	PSURF=PS(I,J)+PR(NFE)
	PLM=P(L,M)
	IF (NF(L,M).NE.0.AND.BETA(I,J).GT.0.0) PLM=PSURF
	DELP=(1.0-PETA(I,J))*PLM+PETA(I,J)*PSURF-P(I,J)
	GO TO 110
  100 CONTINUE
      DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1 RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	DIJ=DIJ/(AC(I,J)*RI(I))
C
      IF(IDEFM.EQ.0.OR.F(I,J).GE.EMF1) GO TO 5
C
      DIJ=DIJ+AMIN1(ADEFM*EPSI,BDEFM*(1.0-F(I,J))/DELT)
C
    5 CONTINUE
C
C     SET FLAG INDICATING CONVERGENCE
C
      IF (ABS(DIJ).GE.EPSI) FLG=1.0
	DELP=-BETA(I,J)*DIJ*PETA(I,J)
  110 CONTINUE
      P(I,J)=P(I,J)+DELP
	DPDT=2.0*DELT*DELP
	IF (AR(I,J).LT.EM6) GO TO 120
	RHOXR=RHOF*(DELX(I+1)+DELX(I))
	U(I,J)=U(I,J)+DPDT/RHOXR
  120 IF (AR(I-1,J).LT.EM6) GO TO 130
      RHOXL=RHOF*(DELX(I)+DELX(I-1))
	U(I-1,J)=U(I-1,J)-DPDT/RHOXL
  130 IF (AT(I,J).LT.EM6) GO TO 140
      RHOYT=RHOF*(DELY(J+1)+DELY(J))
	V(I,J)=V(I,J)+DPDT/RHOYT
  140 IF (AT(I,J-1).LT.EM6) GO TO 150
      RHOYB=RHOF*(DELY(J)+DELY(J-1))
	V(I,J-1)=V(I,J-1)-DPDT/RHOYB
  150 CONTINUE
      CALL BC
	GO TO 10
  160 CONTINUE
      RETURN
C
  170 FORMAT (1X,35HPRESIT CONVERGENCE FAILURE ON CYCLE,I7,1X,2HT=,1PE15
     1 .7,1X,I2,7HTH TIME)
	END
	  



	SUBROUTINE PRTPLT (N)
	INCLUDE "PARAM.FI"
	FVOL=0
	YCFL=1E10      !1.E+99
	DO 10 J=2, JM1
	IF (F(2,J).LE.1.-EM6.AND.F(2,J).GE.EM6) YCFL=Y(J-1)+F(2,J)*(Y(J)-Y
     1 (J-1))
!	IF (YCFL.GT.1.E+98.AND.F(2,J).LE.EM6) YCFL=Y(J-1)
	IF (YCFL.GT.1.E10.AND.F(2,J).LE.EM6) YCFL=Y(J-1)
	DO 10 I=2,IM1
	FVOL=FVOL+F(I,J)*AC(I,J)*TPI*RI(I)*(R(I)-R(I-1))*(Y(J)-Y(J-1))
   10 CONTINUE
C
C     PRINT AND PLOT
C     PROVIDES FORMATTED WRITES TO PAPER AND FILM
C
      GO TO (20,120,140,200), N
C
C     PRTPLT (1) WRITE OUT INITIAL DATA AND MESH DATA
C
   20 WRITE (6,290)
      WRITE (6,300) NAME
	WRITE (6,340) IBAR,JBAR,DELT,XNU,ICYL,EPSI,GX,GY,UI,VI,VELMX,TWFIN
     1,PRTDT,PLTDT,OMG, ALPHA,KL,KR,KT,KB,IMOVY,AUTOT,FLHT,PSAT,ISYMPLT
	2 ,SIGMA,ISURF10,CANGLE,RHOF
	IF (IMOVY.GT.0) GO TO 70
	WRITE (12,290)
	WRITE (12,300) NAME
	WRITE (12,340) IBAR,JBAR,DELT,XNU,ICYL,EPSI,GX,GY,UI,VI,VELMX
     1 , TWFIN,PRTDT,PLTDT,OMG,ALPHA,KL,KR,KT,KB,IMOVY,AUTOT,FLHT,PSAT
	2 , ISYMPLT,SIGMA,ISURF10,CANGLE,RHOF
C
C     WRITE ON FILM VARIABLE MESH INPUT DATA
C
      WRITE (12,370) NKX
	DO 30 I=1, NKX
	WRITE (12,380) I,XL(I),XC(I),XL(I+1),NXL(I),NXR(I),DXMN(I)
   30 CONTINUE
      WRITE (12,400) NKY
	DO 40 I=1,NKY
	WRITE (12,390) I,YL(I),YC(I),YL(I+1),NYL(I),NYR(I),DYMN(I)
   40 CONTINUE
      WRITE (12,440) NOBS
	IF (NOBS.LE.0) GO TO 60
	DO 50 I=1,NOBS
	WRITE (12,450) I,OA2(I),OA1(I),OB2(I),OB1(I),OC2(I),OC1(I),IOH(I)
   50 CONTINUE
   60 CONTINUE
   70 CONTINUE
C    
C     PRINT VARIABLE MESH INPUT DATA
C
      WRITE (6,370) NKX
	DO 80 I=1,NKX
	WRITE (6,380) I,XL(I),XC(I),XL(I+1),NXL(I),NXR(I),DXMN(I)
   80 CONTINUE
      WRITE (6,400) NKY
      DO 90 I=1,NKY
	WRITE(6,390) I,YL(I),YC(I),YL(I+1),NYL(I),NYL(I),NYR(I),DYMN(I)
   90 CONTINUE
      WRITE (6,440) NOBS
	IF (NOBS.LE.0) GO TO 110
	DO 100 I=1,NOBS
      WRITE (6,450) I,OA2(I),OA1(I),OB2(I),OB1(I),OC2(I),OC1(I),IOH(I)
  100 CONTINUE
  110 CONTINUE
      GO TO 240
C
C     PRTPLT (2) WRITE TIME STEP, CYCLE INFORMATION
C

  120 CONTINUE
      FORCE=0.0
	WRITE (6,330) ITER,T,DELT,NCYC,VCHGT,FORCE
	IF (IMOVY.EQ.1) GO TO 130
	IF (T.GT.0.) GO TO 130
	WRITE (12,330) ITER, T,DELT,NCYC,VCHGT,FORCE
  130 CONTINUE
      GO TO 240
C
C     PRTPLT (3) WRITE FIELD VARIABLES TO FILM
C
  140 IF (IMOVY.EQ.1) GO TO 190
C      CALL ADV (1)
	WRITE (12,360) NAME
	WRITE (12,330) ITER,T,DELT,NCYC,VCHGT,FORCE
	WRITE (12,350)
	WRITE (12,410) NREG
	WRITE (12,420)
	KNR=NREG+5
	DO 150 K=6,KNR
	WRITE (12,430) K,VOL(K),PR(K)
  150 CONTINUE
      WRITE (12,260) FVOL, NCYC, YCFL
	WRITE (12,310)
	DO 170 I=1,IMAX
      DO 170 J=1,JMAX
	DIJ=0
	IF (J.EQ.1.OR.I.EQ.1.OR.J.EQ.JMAX.OR.I.EQ.IMAX) GO TO 160
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	IF (AC(I,J).GT.0.0) DIJ=DIJ/(AC(I,J)*RI(I))
  160 CONTINUE
      WRITE (12,320) I,J,U(I,J),V(I,J),P(I,J),DIJ,PS(I,J),F(I,J),NF(I,J)
     1,PETA(I,J)
  170 CONTINUE
      WRITE (12,270) NCYC,T,DELT,(I,I=2,IMAX,2)
	DO 180 JJJ=1,JMAX
	J=JMAX+1-JJJ
	WRITE (12,280) J,(NF(I,J),I=1,IMAX)
  180 CONTINUE
      WRITE (12,275) NCYC,T,DELT,(I,I=2,IMAX,2)
	DO 185 JJJ=1,JMAX
	J=JMAX+1-JJJ
	WRITE (12,280) J,(NW(I,J),I=1,IMAX)
  185 CONTINUE
  190 CONTINUE
	GO TO 240
C
C     PRTPLT (4) WRITE FITE FIELD VARIABLES TO PAPER
C
  200 WRITE (6,290)
      WRITE (6,360) NAME
	WRITE (6,330) ITER,T,DELT,NCYC,VCHGT
      WRITE (6,350)
	WRITE (6,410) NREG
	WRITE (6,420)
	KNR=NREG+5
	DO 210 K=6, KNR
	WRITE (6,430) K,VOL(K),PR(K)
  210 CONTINUE
      WRITE (6,260) FVOL, NCYC, YCFL
	WRITE (6,350)
	WRITE (6,310)
	DO 230 I=1,IMAX
      DO 230 J=1,JMAX
      DIJ=0
	IF (J.EQ.1.OR.I.EQ.1.OR.J.EQ.JMAX.OR.I.EQ.IMAX) GO TO 220
	DIJ=RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1))
	IF (AC(I,J).GT.0.0) DIJ=DIJ/(AC(I,J)*RI(I))
  220 CONTINUE
      WRITE (6,320) I,J,U(I,J),V(I,J),P(I,J),DIJ,PS(I,J),F(I,J),NF(I,J)
     1 ,PETA(I,J)
  230 CONTINUE
  240 RETURN
C
  250 FORMAT (1X,5HT(F)=,1PE14.6,2X,8HON CYCLE,I6)
  260 FORMAT (1X,14HFLUID VOLUME =,1PE14.6,9H ON CYCLE,I6,2X,
	115HYCENT OF FLUID=,E14.6)
  270 FORMAT (1H1,1X,43HNF FIELD (INCL. FICTITIOUS CELLS) FOR CYCLE,I6,
     1 2X,2HT=,1PE14.7 ,2X,5HDELT=,E12.5//5X,32I4)
  275 FORMAT (1H1,1X,43HNW FIELD (INCL. FICTITIOUS CELLS) FOR CYCLE,I6 ,
     1 2X,2HT=,1PE14.7,2X,5HDELT=,E12.5//5X,32I4)
  280 FORMAT (1X,I3,1X,63I2/(5X,63I2))
  290 FORMAT (1H1)
  300 FORMAT (10A8)
  310 FORMAT (4X,1HI,5X,1HJ,9X,1HU,14X,1HV,15X,1HP,15X,1HD,12X,2HPS,13X,
     1 1HF,11X,2HNF,9X,4HPETA)
  320 FORMAT (2X,I3,3X,I3,6(3X,1PE12.5),3X,I3,3X,E12.5)
  330 FORMAT (6X,6HITER= ,I5,5X,6HTIME= ,1PE12.5,5X,6HDELT= ,1PE12.5,5X,
     1 7HCYCLE= ,I6,2X,7HVCHGT= , 1PE12.5,2X,4HFY= ,E12.5)
  340 FORMAT (1H ,5X,6HIBAR= ,I3/6X,6HJBAR= ,I3/6X,6HDELT= ,1PE12.5/8X,
     14HNU= ,E12.5/6X,6HICYL= ,I2/6X,6HEPSI= ,E12.5/8X,4HGX= ,E12.5/8X,
	24HGY= ,E12.5/8X,4HUI= ,E12.5/8X,4HVI= ,E12.5/5X,7HVELMX= ,E12.5/5X
	3,7HTWFIN= ,E12.5/5X,7HPRTDT= ,E12.5/5X,7HPLTDT= ,E12.5/7X,5HOMG= 
	4,E12.5/5X,7HALPHA= ,E12.5/8X,4HKL= ,I2/8X,4HKR= ,I2/8X,4HKT= ,I2/
	58X,4HKB= ,I2/5X,7HIMOVY= ,I2/5X,7HAUTOT= ,E12.5/6X,6HFLHT= ,E12.5
	6 ,6X,6HPSAT= ,E12.5/3X,9HISYMPLT= ,I2/5X,7HSIGMA= ,E12.5/3X,
	7 9HISURF10= ,I2/4X,8HCANGLE= ,E12.5/7X,6HRHOF=  ,E12.5/)
  350 FORMAT (1HO)
  360 FORMAT (1H1,18X,10A8,1X,A10,2(1X,A8))
  370 FORMAT (2X,5HNKX= ,I4)
  380 FORMAT (2X,8HMESH-X= ,I4,3X,4HXL= ,1PE12.5,3X,4HXC= ,E12.5,3X,
     14HXR= ,E12.5,3X,5HNXL= ,I4,3X,5HNXR= ,I4,3X,6HDXMN= ,E12.5)
  390 FORMAT (2X,8HMESH-Y= ,I4,3X,4HYL= ,1PE12.5,3X,4HYC= ,E12.5,3X,
     14HYR= ,E12.5,3X,5HNYL= ,I4,3X,5HNYR= ,I4,3X,4HYL= ,1PE12.5,3X,
	16HDYMN= ,E12.5)
  400 FORMAT (2X,5HNKY= ,I4)
  410 FORMAT (2X,6HNREG= ,I4)
  420 FORMAT (15X,1HK,6X,6HVOL(K),9X,5HPR(K))
  430 FORMAT (13X,I3,2X,1PE12.5,3X,E12.5)
  440 FORMAT (2X,6HNOBS= ,I2)
  450 FORMAT (2X,2HI=,I2,2X,4HOA2=,1PE12.5,2X,4HOA1= ,E12.5,2X,5HOB2=  
     1,E12.5,2X,5HOB1= ,E12.5,2X,5HOC2= ,E12.5,2X,5HOC1= ,E12.5,2X,
     25HIOH= ,I2)
	END




	SUBROUTINE SETUP
	INCLUDE "PARAM.FI"
	NAMELIST/XPUT/DELT,XNU,ICYL,EPSI,GX,GY,UI,VI,VELMX,TWFIN,PRTDT
     1,PLTDT,OMG,ALPHA,KL,KR,KT,KB,IMOVY,AUTOT,FLHT,PSAT,ISAT,ISYMPLT,
	2SIGMA,ISURF10,CANGLE,RHOF,IEQIC
	3 ,NAME,NDUMP,QVOL,ISOR,IDEFM,NPACK,CON,DTCRMX,IDIV
      NAMELIST /MSHSET/ NKX,XL,XC,NXL,NXR,DXMN,NKY,YL,YC,NYL,NYR,DYMN
	NAMELIST /ASETIN/ NOBS,OA2,OA1,OB2,OB1,OC2,OC1,IOH
C
C	INITIALIZE SELECTED VARIABLES
C
	DATA T/0.0/,ITER/0.0/,FLGC/0.0/,FNOC/0.0/,NCYC/0.0/,NFLGC/0.0/,
     1NOCON/0.0/,TWPLT/0.0/,TWPRT/0.0/,VCHGT/0.0/,NEQUIB/501/
	DATA ISOR,IDEFM,NPACK,NDUMP,NOBS,QVOL/0.0,0.0,0.0,0.0,0.0,0.0/
	DATA CON,DTCRMX,IDIV/0.3,0.001,1/
C
C	READ INITIAL INPUT DATA
C
c	READ(5,XPUT)
	WRITE(12,330) NAME
	WRITE(12,360) NDUMP,QVOL
	WRITE(12,320) ISOR,IDEFM
c	READ(5,MSHSET)
	DO 30 K=1,NOBD
	OA2(K)=0.0
	OA1(K)=0.0
	OB2(K)=0.0
	OB1(K)=0.0
	OC2(K)=0.0
	OC1(K)=0.0
   30 CONTINUE
c	READ(5,ASETIN)
C
C	IF THE DUMP SEQUENCE NUMBER IS GREATER THAN ZERO,READ A RESTART 
C	DUMP AND SKIP THE REST OF THE SETUP ROUTINE
C
	IF(NDUMP.LE.0.0) GO TO 40
	CALL TAPIN
	GO TO 290
   40 CONTINUE
	CALL MESHSET
C
C	COMPUTE CONSTANT TERMS AND INITIALIZE NESSESARY  VARIABLES
C
C	SET PARAMETER STATEMENT VALUE INTO CONSTANT
C
C
	NDUMP=1
	IF(ICYL.EQ.0) TPI=1.0
	CYL=FLOAT(ICYL)
	EMF1=1.0-EMF
	IF(CANGLE.EQ.90.0) CANGLE=CANGLE-EM6
	DANGLE=CANGLE
	CANGLE=CANGLE*RPD
	IF(CON*1.3.LE.FCVLIM) GO TO 50
	WRITE(12,380) CON,FCVLIM
	WRITE(59,380) CON,FCVLIM
	FCVLIM=1.3*CON
   50 CONTINUE
	BOND=1.0E10 !!!!!
	IF(SIGMA.GT.0.0) BOND=RHOF*GY*X(IM1)**2/SIGMA
	WRITE(59,380) BOND
	WRITE(12,380) BOND
	IPL=2
	IF(KL.EQ.5) IPL=3
	IPR=IM1
	IF(KR.EQ.5) IPR=IBAR
	JPB=2
	IF(KB.EQ.5) JPB=3
	JPT=JM1
	IF(KT.EQ.5) JPT=JBAR
C
C	SET CONSTANT TEERMS FOR PLOTTING
C
	XMIN=X(1)
	XMAX=X(IM1)
	IF(ISYMPLT.GT.0.0) XMIN=-XMAX
	YMIN=Y(1)
	YMAX=Y(JM1)
	D1=XMAX-XMIN
	D2=YMAX-YMIN
	D3=AMAX1(D1,D2)
	SF=1.0/D3
	XSHFT=0.5*(1.0-D1*SF)
	YSHFT=0.5*(1.0-D2*SF)
	DXMIN=EP10
	DO 60 I=2,IM1
   60 DXMIN=AMIN1(DELX(I),DXMIN)
	DXMIN=EP10
	DO 70 I=2,JM1
   70 DYMIN=AMIN1(DELY(I),DYMIN)
	VELMX1=AMIN1(DXMIN,DYMIN)/VELMX
	DO 80 I=1,IMAX
	DO 80 J=1,JMAX
	BETA(I,J)=0.0
	AC(I,J)=1.0
	AR(I,J)=1.0
	AT(I,J)=1.0
   80 CONTINUE
C
C	SETSPECIAL A VALUES FOR OBSTACLES AND B.C.
C
	CALL ASET

C
C	DETERMINE SLOPED BOUNDARY LOCATION
C
C	COMPUTE INITIAL VOLUME FRACTION FUNCTIONF IN CELLS
C
	IF(IEQIC.LE.0.0) GO TO 90
	IF(NEQUIB+2.LT.IBAR2*JBAR2) GO TO 90
	WRITE(59,400) NEQUIB,IBAR2,JBAR2
	WRITE(12,400) NEQUIB,IBAR2,JBAR2
	NEQUIB=IBAR2*JBAR2-2
	WRITE(59,400) NEQUIB
	WRITE(12,400) NEQUIB
   90 CONTINUE
	IF(IEQIC.GT.0) CALL EQUIB(U,V,NEQUIB,BOND,DANGLE,CYL)
	SFLHT=FLHT
	DO 120 I=1,IMAX
	DO 110 J=2,JMAX
	F(I,J)=1.0
	IF(IEQIC.LE.0) GO TO 100
	LDCK=FLOAT(NEQUIB-1)*XI(I)/X(IM1)+1.000001
	LDCK=MIN0(NEQUIB,LDCK)
	LDCK=MAX0(1,LDCK)
	FLHT=SFLHT+U(LDCK,1)*X(IM1)
  100 CONTINUE
      IF (FLHT.GT.Y(J-1).AND.FLHT.LT.Y(J))F(I,J)=RDY(J)*(FLHT-Y(J-1))
	IF (Y(J-1).GE.FLHT)F(I,J)=0.0
  110 CONTINUE
      F(I,1)=F(I,2)
  120 CONTINUE
      FLHT=SFLHT
C
C     GENERATE SPECIAL F-FUNCTION (FLUID) CONFIGURATION
        nn=int(IM2/4)	
        nn2=2*nn
        AL=DelX(1)*nn
        HD=DelY(1)*nn2
        Xmin=0.0
        Ymin=0.0
        XD=Xmin+AL
        YD=Ymin+HD
        nf(2:nn+1,2:nn2+1)=0
        f(2:nn+1,2:nn2+1)=1
C     CALCULATE STVIS AND DTSFT
C
      DS=1.0E+10
	DTVIS=1.0E+10
	DTSFT=1.0E+10
	DST=1.0E10
	DO 130 I=2,IM1
	DO 130 J=2,JM1
	DXSQ=DELX(I)**2
	DYSQ=DELY(J)**2
	RDSQ=DXSQ*DYSQ/(DXSQ+DYSQ)
	RDSQ=RDSQ/(3.0*XNU+1.0E-6)
	DTVIS=AMIN1(DTVIS,RDSQ)
	DS=AMIN1(DELX(I),DELY(J),DS)
	DSTX=DELX(I)*DELX(I)/(3.0*DELY(J)*RDX(I)+CYL)
      DSTY=DELY(J)*DELY(J)/(3.0*DELX(I)*RDY(J)**2+CYL)
      DST=AMIN1(DST,DSTX*DELX(I),DSTY*DELX(I))
  130 CONTINUE
      SIGX=SIGMA
	IF (SIGX.EQ.0.0) SIGX=EM10
	DTM=SQRT(RHOF*DST/(SIGX*4.0))
	DTSFT=AMIN1(DTSFT,DTM)
C
C     CALCULATE BETA(I,J) FOR MESH
C
      DO 140 I=2,IM1
	DO 140 J=2,JM1
	IF (AC(I,J).LT.EM6) GO TO 140
	RHXR=RHOF*(DELX(I+1)+DELX(I))
      RHXL=RHOF*(DELX(I)+DELX(I-1))
	RHYT=RHOF*(DELY(J+1)+DELY(J))
	RHYB=RHOF*(DELY(J)+DELY(J-1))
	XX=DELT*2.0*(RDX(I)*(AR(I-1,J)*R(I-1)/RHXL+AR(I,J)*R(I)/RHXR)+
     1 RDY(J)*(AT(I,J)*RI(I)/RHYT+AT(I,J-1)*RI(I)/RHYB))
	XX=XX*(AC(I,J)*RI(I)) !!!!??????
	BETA(I,J)=OMG/XX
  140 CONTINUE
C
C     SET BETA(I,J)= -1.0 IN OBSTACLE CELLS
C     MUST BE DONE BY HAND IN GENERAL
C
C     PRINT BETA(I,J) ON FILM AND PAPER
C
      IF (IMOVY.EQ.1) GO TO 160
	WRITE (12,420)
	WRITE (12,430)
	DO 150 J=1,JM1
	DO 150 I=1,IM1
	WRITE (12,440) I,J,BETA(I,J),AC(I,J),AR(I,J),AT(I,J),SINO(I,J),
     1 COSO(I,J)
  150 CONTINUE
  160 CONTINUE
	WRITE(6,420)
	WRITE(6,430)
	DO 170 J=1,JM1
	DO 170 I=1,IM1
	WRITE (6,440) I,J,BETA(I,J),AC(I,J),AR(I,J),AT(I,J),SINO(I,J),
     1 COSO(I,J)
  170 CONTINUE
C 
C     CALCULATE HYDROSTATIC PRESSURE
C
      DO 180 I=2,IM1
	P(I,JMAX)=0.0
	DO 180 J=2,JM1
	JJ=JM1-J+2
	RHOYA=(AMIN1(F(I,JJ+1),0.5)*DELY(JJ+1)+AMAX1(0.0,F
     1 (I,JJ)-0.5)*DELY(JJ))*RHOF
	P(I,JJ)=P(I,JJ+1)-GY*RHOYA
  180 CONTINUE
C
C     SET INITIAL SURFACE PRESSURE
C
      DO 260 J=2,JM1
	DO 260 I=2,IM1
	PS(I,J)=0.0
  260 CONTINUE
C
C     SET INITIAL VELOCITI FIELD INTO U AND V ARRAYS
C
      DO 270 I=1,IMAX
	DO 270 J=1,JMAX
	U(I,J)=UI
      V(I,J)=VI
	IF (AT(I,J).LT.EM6) V(I,J)=0.0
      IF (AR(I,J).LT.EM6) U(I,J)=0.0
	IF (F(I,J).GT.EMF) GO TO 270
	U(I,J)=0.0
	V(I,J)=0.0
  270 CONTINUE
C
C     SET INITIAL VOID REGION QUANTITIES
C
      DO 280 K=1,NVOR
	NR(K)=0
	PR(K)=PSAT
  280 VOL(K)=0.0
  290 RETURN
C
  300 FORMAT (1X,2HK=,1PE12.4,2X,3HXI=,E12.4,2X,4HPER=,E12.4)
  310 FORMAT (1X,11H***** ISOR=,I10,21H MUST BE 0 OR 1 *****)
  320 FORMAT (4X,6HISOR *,I5,4X,7HIDEFM *,I5)
  330 FORMAT (10A8)
  340 FORMAT (10X,I10)
  350 FORMAT (10X,E20.6)
  360 FORMAT (3X,7HNDUMP =,I10/4X,6HQVOL =,1PE20.6)
  370 FORMAT (10X,7I10)
  380 FORMAT (1X,4HCON=,1PE10.3,1X,11HAND FCVLIM=,E10.3,1X,
     140HARE INCOMPATIBLE SETTING FCVLIM=1.3*CON.)
  390 FORMAT (1X,13HBOND NUMBER =,1PE12.4)
  400 FORMAT (/1X,8HNEQUIB =,I5,1X,29HIS TOO EIG FOR THE DIMENSIONS,2I5)
  410 FORMAT (1X,17HCUTTING NEQUIB TO,I5,15HAND CONTINUING,)
  420 FORMAT (1H1)
  430 FORMAT (4X,1HI,5X,1HJ,8X,4HBETA,11X,2HAC,13X,2HAR,13X,2HAT,12X,
     14HSINO, 11X,4HCOSO)
  440 FORMAT (2X,I3,3X,I3,6(3X,1PE12.5))
      END






	SUBROUTINE TAPIN
	INCLUDE "PARAM.FI"
C
C     READ RESTART DUMP FROM TAPE7

c      READ (7) MDUMP
c	IF (MDUMP.EQ.NDUMP) GO TO 10
c	WRITE (6,20) MDUMP, NDUMP
c	WRITE (12,20) MDUMP,NDUMP
c	WRITE (59,20) MDUMP,NDUMP
c	CALL EXITLDC(8HTAPIN)
c   10 CONTINUE
c      NDUMP=NDUMP+1
c	READ (7) UN,VN,PN,FN,U,V,P,F,PETA,NF,PS,AR,AT,AC
c	READ (7) X,XI,RXI,DELX,RDX,RX,Y,YJ,RYJ,DELY,RDY,XL,XC,DXMN,NXL,NXR
c     1 ,YL,YC,DYMN,NYL,NYR,ZC
c	READ (7) NR,PR,VOL,IBAR,JBAR,IMAX,JMAX,IM1,JM1,NKX,NCYC,DELT,T
c     1 ,TWPRT,TWPLT,RHOF,NREG,VCHGT
c	2 ,CANGLE,ICYL,CYL,ITER,FLG,FLGC,FNOC,NOCON,NFLGC,ISYMPLT
c	3 ,IMOVY,VELMX,VELMX1,XSHFT,YSHFT,XMIN,XMAX,YMIN,YMAX,SF
c	4 ,IPL,IPR,JPB,JPT,DTVIS,DTSFT,DXMIN,DYMIN,PSAT
c	5 ,LITER,EMF1
c	WRITE (6,30) NCYC,MDUMP,T
c      WRITE (12,30) NCYC,MDUMP,T
c      WRITE (59,30) NCYC,MDUMP,T
c	RETURN
C
c   20 FORMAT (1X,22HTAPIN ERROR - GOT DUMP,I4,16H, EXPECTING DUMP,I4)
c   30 FORMAT (1X,19HRESTARTING ON CYCLE,I7,10H,FROM DUMP,I3,4H T =,1PE13
c     1 .6)
	 END




	SUBROUTINE TAPOUT (NKKP)
	INCLUDE "PARAM.FI"
C
C     WRITE RESTART DUMP ON TAPE7
C     NKKP = -1, EQUILIBRIUM MESH DUMP
C          = 0,FINAL DUMP ON A RUN, TERMINATE
C          = 1,PERIODIC BACK-UP DUMP DURING A RUN
C
c      IF (NKKP.GE.0) GO TO 20
c	CALL ADV (1)
c	WRITE (6,30) NCYC
c      WRITE (12,30) NCYC
c      WRITE (59,30) NCYC
c	DO 10 I=1,IMAX
c      DO 10 J=1,JMAX
c	U(I,J)=0
c	V(I,J)=0
c   10 CONTINUE
c   20 CONTINUE
c      LCMS=7HBACKUP
c	IF (NKKP.EQ.0) LCMS=7HRESTART
c	WRITE (6,40) LCMS, NCYC,T
c	IF (IMOVY.EQ.0) WRITE (12,40) LCMS,NCYC,T
c	WRITE (59,40) LCMS,NCYC,T
c	REWIND 7
c	WRITE (7) NDUMP
c	WRITE (7) UN,VN,PN,FN,U,V,P,F,PETA,BETA,NF,PS,AR,AT,AC
c	WRITE (7) X,XI,RXI,DELX,RDX,RX,Y,YJ,RYJ,DELY,RDY,XL,XC,DXMN,NXL
c     1 ,NXR,YL,TC,DYMN,NYL,NYR,ZC
c	WRITE (7) NR,PR,VOL,IBAR,JBAR,IMAX,JMAX,IM1,JM1,NKX,NKY,NCYC,DELT
c     1 ,T,TWPRT,TWPLT,RHOF,NREG,VCHGT
c	2 ,CANGLE,ICYL,CYL,ITER,FLG,FLGC,FNOC,NOCON,NFLGC
c	3 ,ISYMPLT,IMOVY,VELMX,VELMX1,XSHFT,YSHFT,XMAX,YMIN,YMAX,SF
c	4 ,IPL,IPR,JPB,JPT,DTVIS,DTSFT,DXMIN,DYMIN
c	5 ,PSAT,LITER,EMF1
c	IF (NKKP.LE.0) CALL EXITLDC (6HTAPOUT)
c	RETURN
C
c   30 FORMAT (1X,39HEQUILIBRIUM MESH DUMP TO TAPE7 ON CYCLE,I7)
c   40 FORMAT (1X,A7,1X,13HDUMP ON CYCLE,I7,2X,3HT =,1PE13.5)
      END






	SUBROUTINE TILDE
      INCLUDE "PARAM.FI"
C
C     COMPUTE TEMPORARY U AND V EXPLICITLY
C
      VISX=0.0
	VISY=0.0
	DO 20 J=2,JM1
	DO 20 I=2,IM1
	CALL DVCAL
	U(I,J)=0.0
	RDELX=1.0/(DELX(I)+DELX(I+1))
      RDELY=1.0/(DELY(J)+DELX(J+1))
	IF (NF(I,J)+NF(I+1,J).GE.12) GO TO 10
	IF (AR(I,J).LT.EM6) GO TO 10
	SGU=SIGN(1.0,UN(I,J))
      RDXA=DELX(I)+DELX(I+1)+ALPHA*SGU*(DELX(I+1)-DELX(I))
	RDXA=1.0/RDXA
	FUX=RDXA*UN(I,J)*(DELX(I)*DUDR+DELX(I+1)*DUDL+ALPHA*SGU*(DELX(I+1)
     1 *DUDL-DELX(I)*DUDR))
	VBT=(DELX(I)*VN(I+1,J)+DELX(I+1)*VN(I,J))*RDELX
	VBB=(DELX(I)*VN(I+1,J-1)+DELX(I+1)*VN(I,J-1))*RDELX
	VAV=0.5*(VBT+VBB)
	DYT=0.5*(DELY(J)+DELY(J+1))
	DYB=0.5*(DELY(J-1)+DELY(J))
	SGV=SIGN(1.0,VAV)
	DYA=DYT+DYB+ALPHA*SGV*(DYT-DYB)
	FUY=(VAV/DYA)*(DYB*DUDT+DYT*DUDB+ALPHA*SGV*(DYT*DUDB-DYB*DUDT))
	IF(XNU.EQ.0.0)GO TO 5
	DUDXSQ=(DUDR-DUDL)/(XI(I+1)-XI(I))
	DUDYSQ=(DUDT-DUDB)/(YJ(J+1)-YJ(J-1))
	RXDUDX=RX(I)*(DELX(I+1)*DUDL+DELX(I)*DUDR)/(DELX(I)+DELX(I+1))
	RXSQU=UN(I,J)*RX(I)**2
	VISX=XNU*(DUDXSQ+DUDYSQ+CYL*RXDUDX-CYL*RXSQU)
    5 CONTINUE
      RHOX=RHOF*(DELX(I+1)+DELX(I))
	U(I,J)=UN(I,J)+DELT*(GX-FUX-FUY+VISX)+DELT*(P(I,J)-P(I+1,J))*2.0
     1 /RHOX
   10 CONTINUE
      V(I,J)=0.0
	IF (NF(I,J)+NF(I,J+1).GE. 12) GO TO 20
      IF (AT(I,J).LT.EM6) GO TO 20
	UBR=(DELY(J+1)*UN(I,J)+DELY(J)*UN(I,J+1))*RDELY
	UBL=(DELY(J+1)*UN(I-1,J)+DELY(J)*UN(I-1,J+1))*RDELY
	UAV=0.5*(UBR+UBL)
	DXR=0.5*(DELX(I)+DELX(I+1))
      DXL=0.5*(DELX(I)+DELX(I-1))
      SGU=SIGN(1.0,UAV)
	DXA=DXR+DXL+ALPHA*SGU*(DXR-DXL)
	FVX=(UAV/DXA)*(DXL*DVDR+DXR*DVDL+ALPHA*SGU*(DXR*DVDL-DXL*DVDR))
	SGV=SIGN(1.0,VN(I,J))
	DYA=DELY(J+1)+DELY(J)+ALPHA*SGV*(DELY(J+1)-DELY(J))
	FVY=(VN(I,J)/DYA)*(DELY(J)*DVDT+DELY(J+1)*DVDB+ALPHA*SGV*(DELY(J+1
     1 )*DVDB-DELY(J)*DVDT))
	IF(XNU.EQ.0.0)GO TO 15
	DVDXSQ=(DVDR-DVDL)/(XI(I+1)-XI(I-1))
	DVDYSQ=(DVDT-DVDB)/(YJ(J+1)-YJ(J))
	DVDXRX=0.5*(DVDR+DVDL)*RXI(I)
	VISY=XNU*(DVDXSQ+DVDYSQ+CYL*DVDXRX)
   15 CONTINUE
      RHOY=RHOF*(DELY(J+1)+DELY(J))
	V(I,J)=VN(I,J)+DELT*(GY-FVX-FVY+VISY)+DELT*(P(I,J)-P(I,J+1))*2.0
     1 /RHOY
   20 CONTINUE
      RETURN
	END



	SUBROUTINE VFCONV
	INCLUDE "PARAM.FI"
	DATA FCVLIM /.9/
C
C     CONVECT THE VDLUME OF FLUID FUNCTION F
C
      IF (NCYC.LT.1) GO TO 100
      FLGC=0.0
	DO 50 J=1,JM1
	DO 50 I=1,IM1
	IF(BETA(I,J).LE.0.0) GO TO 50
	VX=U(I,J)*DELT
	VY=V(I,J)*DELT
	ABVX=ABS(VX)
	ABVY=ABS(VY)
	IF (ABVX.LE.FCVLIM*DELX(I).AND.ABVY.LE.FCVLIM*DELY(J)) GO TO 10
	FLGC=1
	WRITE (59,150) NCYC,T,DELT,I,J,FCVLIM,ABVX,DELX(I),ABVY,DELY(J)
      WRITE (12,150) NCYC,T,DELT,I,J,FCVLIM,ABVX,DELX(I),ABVY,DELY(J)
   10 CONTINUE
      IF (AR(I,J).LT.EMF) GO TO 30
	IA=I+1
	ID=I
	IDM=MAX0(I-1,1)
	ARDM=AR(IDM,J)
	RB=AR(I,J)*R(I)
	RA=AC(I+1,J)*RI(I+1)
	RD=AC(I,J)*RI(I)
	IF (VX.GE.0.0) GO TO 20
	IA=I
	ID=I+1
	IDM=MIN0(I+2,IMAX)
	ARDM=AR(IDM-1,J)
	RA=AC(I,J)*RI(I)
	RD=AC(I+1,J)*RI(I+1)
   20 CONTINUE
      IAD=IA
	IF (NF(ID,J).EQ.3.OR.NF(ID,J).EQ.4) IAD=ID
	IF (FN(IA,J).LT.EMF.OR.FN(IDM,J).LT.EMF) IAD=IA
	FDM=AMAX1(FN(IDM,J),FN(ID,J),0.10)
	IF(ARDM.LT.EM6) FDM=1.0
	FX1=FN(IAD,J)*ABS(VX)+AMAX1((FDM-FN(IAD,J))*ABS(VX)-(FDM-FN(ID,J))
     1 *DELX(ID),0.0)
	FX=AMIN1(FX1,FN(ID,J)*DELX(ID)*RD/RB)
	F(ID,J)=F(ID,J)-FX*RDX(ID)*(RB/RD)
      F(IA,J)=F(IA,J)-FX*RDX(IA)*(RB/RA)
   30 IF (AT(I,J).LT.EM6) GO TO 50
      JA=J+1
	JD=J
	JDM=MAX0(J-1,1)
	ATDM=AT(I,JDM)
	RB=AT(I,J)
	RA=AC(I,J+1)
	RD=AC(I,J)
	IF (VY.GE.0.0) GO TO 40
	JA=J
	JD=J+1
	JDM=MIN0(J+2,JMAX)
	ATDM=AT(I,JDM-1)
	RA=AC(I,J)
	RD=AC(I,J+1)
   40 CONTINUE
      JAD=JA
	IF (NF(I,JD).EQ.1.OR.NF(I,JD).EQ.2) JAD=JD
	IF (FN(I,JA).LT.EMF.OR.FN(I,JDM).LT.EMF) JAD=JA
	FDM=AMAX1(FN(I,JDM),FN(I,JD),0.10)
	IF(ATDM.LT.EM6) FDM=1.0
	FY1=FN(I,JAD)*ABS(VY)+AMAX1((FDM-FN(I,JAD))*ABS(VY)-(FDM-FN(I,JD))
     1 *DELY(JD),0.0)
	FY=AMIN1(FY1,FN(I,JD)*DELY(JD)*RD/RB)
	F(I,JD)=F(I,JD)-FY*RDY(JD)*(RB/RD)
      F(I,JA)=F(I,JA)-FY*RDY(JA)*(RB/RA)
   50 CONTINUE
C     DEFDAM IT
      IF (NPACK.EQ.0) GO TO 70
	DO 60 I=2,IM1
	DO 60 J=2,JBAR
	IF (AT(I,J).LT.EMF) GO TO 60
	IF (NF(I,J).NE.0) GO TO 60
	IF (F(I,J).GE.EMF1) GO TO 60
	FADD=AMIN1(1.-F(I,J),F(I,J+1))
	F(I,J)=F(I,J)+FADD
	F(I,J+1)=F(I,J+1)-FADD
   60 CONTINUE
   70 CONTINUE
C          DIVERGENCE CORRECTION TERM
      IF(IDIV.EQ.0) GO TO 90
	IF(IDEFM.EQ.1) GO TO 90
	DO 80 J=2,JM1
	DO 80 I=2,IM1
	IF (NF(I,J).NE.0.OR.AC(I,J).LE.0.) GO TO 80
	DIJ=(RDX(I)*(AR(I,J)*R(I)*U(I,J)-AR(I-1,J)*R(I-1)*U(I-1,J))+
     1 RDY(J)*(AT(I,J)*RI(I)*V(I,J)-AT(I,J-1)*RI(I)*V(I,J-1)))/
	2 (AC(I,J)*RI(I))
	F(I,J)=F(I,J)+DELT*FN(I,J)*DIJ
   80 CONTINUE
   90 CONTINUE
  100 CONTINUE
      DO 140 J=2,JM1
	DO 140 I=2,IM1
	IF (BETA(I,J).LT.0.0) GO TO 140
	VCHG=0.0
	IF (F(I,J).GT.EMF.AND.F(I,J).LT.EMF1) GO TO 120
	IF (F(I,J).GE.EMF1) GO TO 110
	VCHG=F(I,J)
	F(I,J)=0.0
	GO TO 120
  110 CONTINUE
      VCHG=-(1.0-F(I,J))
	F(I,J)=1.0
  120 CONTINUE
      VCHGT=VCHGT+VCHG*DELX(I)*DELY(J)*AC(I,J)*RI(I)*TPI
	IF (F(I,J).LT.EMF1) GO TO 140
	IF (F(I+1,J).LT.EMF.AND.AR(I,J).GT.EM6) GO TO 130
      IF (F(I-1,J).LT.EMF.AND.AR(I-1,J).GT.EM6) GO TO 130
	IF (F(I,J+1).LT.EMF.AND.AT(I,J).GT.EM6) GO TO 130
	IF (F(I,J-1).LT.EMF.AND.AT(I,J-1).GT.EM6) GO TO 130
	GO TO 140
  130 F(I,J)=F(I,J)-1.1*EMF
      VCHG=1.1*EMF
	VCHGT=VCHGT+VCHG*DELX(I)*DELY(J)*AC(I,J)*RI(I)*TPI
  140 CONTINUE
C
C     SPECIAL BOUNDARI CONDITIONS FOR F
C
      RETURN
C
  150 FORMAT (1X,12HVFCONV ERROR/1X,5HNCYC=,I7,1X,2HT=,1PE14.6,1X ,
     15HDELT=,E12.4,1X,4HI,J=,2I4,1X,7HFCVLIM=,E11.3/3X,5HABVX=,E12.4,
	21X,5HDELX=,E12.4,1X,5HABVY=,E12.4,1X,5HDELY=,E12.4)
	END

	

	SUBROUTINE SETPAR
	INCLUDE 'PARAM.FI'	
      
      DELT=0.01
      FLHT=0.0
      GY=-9.81
      PLTDT=0.1
      PRTDT=0.1
      TWFIN=1.0
      UI=0.0
      VELMX=5.0
      KL=2
      KR=2
      KT=2
      KB=2
      AUTOT=1.0
	
	
	
C	*** MESH SETUP
	NKX=1
	XL(1)=0.0
	XL(2)=1.0
	XC(1)=0.5
	
	NXL=8
	NXR=8
	DXMN(1)=1.0/16.0
	NKY=1
	YL(1)=0.0
	YL(2)=1.0
	YC(1)=0.5
	NYL=8
	NYR=8
	DYMN(1)=1.0/16.0
C     PHYSICS SETUP
      XNU=1E-6
      RHOF=1000.0
      
	END




	SUBROUTINE VTK(IOPST,FNAME)
      INCLUDE 'PARAM.FI'	
      
      INTEGER IOPST,IOS
      CHARACTER(200) FNAME
      REAL UTEMP(IBAR2,JBAR2),VTEMP(IBAR2,JBAR2)
      INTEGER I,J
      

	open(IOpst,file=fname,status='new',iostat=ios)
	write(IOpst,'(A)')   '# vtk DataFile Version 2.0'
	write(IOpst,'(A,A,A)')   'vof result output'
	write(IOpst,'(A)')      'ASCII'

	!grid data

	write(IOpst,'(A)')      'DATASET RECTILINEAR_GRID' 
	write(IOpst,'(A,1X,I5,1X,I5,1X,I5)')      'DIMENSIONS',IM1,JM1,1
	write(IOpst,'(A,1X,I5,1X,A)')      'X_COORDINATES',IM1,'double'  
	write(IOpst,*)   X(1:IM1)  
	write(IOpst,'(A,1X,I5,1X,A)')      'Y_COORDINATES',JM1,'double' 
	write(IOpst,*)   Y(1:JM1)  
	write(IOpst,'(A,1X,I5,1X,A)')      'Z_COORDINATES',1,'double'
	write(IOpst,*)   0.0 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
      write(IOpst,'(A,1X,I5)')   'POINT_DATA', (IM1)*(JM1)
      write(IOpst,'(A,1X,A,1X,A)') 'VECTORS', 'velocity_point', 'double'
      utemp=0d0
      vtemp=0d0


      do i=1,IM1
        do j=1,JM1 !!!
            utemp(i,j)=0.5d0*(u(i,j+1)+u(i,j))
        end do
      end do

      do i=1,IM1 !!!
        do j=1,JM1
            vtemp(i,j)=0.5d0*(v(i+1,j)+v(i,j))
        end do
      end do

      do j=1,JM1
        do i=1,IM1 
         write(IOpst,'(f8.3,1X,f8.3,1X,f8.3)') utemp(i,j),vtemp(i,j),0.0  
        end do
      end do

      write(IOpst,'(A,1X,I5)')   'CELL_DATA', (IM2)*(JM2)

      write(IOpst,'(A,1X,A,1X,A,1X,I1)') 'SCALARS', 'pressure', 
     1'double',1
      write(IOpst,'(A,1X,A)') 'LOOKUP_TABLE', 'default'
      do j=2,JM1
        do i=2,IM1 
            write(IOpst,'(f20.3)') p(i,j)
        end do
      end do

      write(IOpst,'(A,1X,A,1X,A,1X,I1)') 'SCALARS', 'vof_fraction', 
     1'double',1
      write(IOpst,'(A,1X,A)') 'LOOKUP_TABLE', 'default'
      do j=2,JM1
        do i=2,IM1  
            write(IOpst,'(f8.3)') f(i,j)
        end do
      end do       
      
      END



	
























 
